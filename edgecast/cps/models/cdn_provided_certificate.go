// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CdnProvidedCertificate cdn provided certificate
//
// swagger:model CdnProvidedCertificate
type CdnProvidedCertificate struct {

	// at id
	AtID string `json:"@id,omitempty"`

	// at type
	AtType string `json:"@type,omitempty"`

	// auto renew
	AutoRenew bool `json:"auto_renew,omitempty"`

	// certificate authority
	// Enum: [DigiCert LetsEncrypt]
	CertificateAuthority string `json:"certificate_authority,omitempty"`

	// certificate label
	CertificateLabel string `json:"certificate_label,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// created by
	CreatedBy *Actor `json:"created_by,omitempty"`

	// dcv method
	// Enum: [Email DnsCnameToken DnsTxtToken]
	DcvMethod string `json:"dcv_method,omitempty"`

	// deployments
	Deployments []*RequestDeployment `json:"deployments"`

	// description
	Description string `json:"description,omitempty"`

	// domains
	Domains []*Domain `json:"domains"`

	// expiration date
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expiration_date,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last modified
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// modified by
	ModifiedBy *Actor `json:"modified_by,omitempty"`

	// organization
	Organization *OrganizationDetail `json:"organization,omitempty"`

	// request type
	// Enum: [Basic Enterprise Custom AzureCustom]
	RequestType string `json:"request_type,omitempty"`

	// thumbprint
	Thumbprint string `json:"thumbprint,omitempty"`

	// validation type
	// Enum: [None DV OV EV]
	ValidationType string `json:"validation_type,omitempty"`

	// workflow error message
	WorkflowErrorMessage string `json:"workflow_error_message,omitempty"`
}

// Validate validates this cdn provided certificate
func (m *CdnProvidedCertificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcvMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cdnProvidedCertificateTypeCertificateAuthorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DigiCert","LetsEncrypt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cdnProvidedCertificateTypeCertificateAuthorityPropEnum = append(cdnProvidedCertificateTypeCertificateAuthorityPropEnum, v)
	}
}

const (

	// CdnProvidedCertificateCertificateAuthorityDigiCert captures enum value "DigiCert"
	CdnProvidedCertificateCertificateAuthorityDigiCert string = "DigiCert"

	// CdnProvidedCertificateCertificateAuthorityLetsEncrypt captures enum value "LetsEncrypt"
	CdnProvidedCertificateCertificateAuthorityLetsEncrypt string = "LetsEncrypt"
)

// prop value enum
func (m *CdnProvidedCertificate) validateCertificateAuthorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cdnProvidedCertificateTypeCertificateAuthorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CdnProvidedCertificate) validateCertificateAuthority(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificateAuthority) { // not required
		return nil
	}

	// value enum
	if err := m.validateCertificateAuthorityEnum("certificate_authority", "body", m.CertificateAuthority); err != nil {
		return err
	}

	return nil
}

func (m *CdnProvidedCertificate) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CdnProvidedCertificate) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

var cdnProvidedCertificateTypeDcvMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Email","DnsCnameToken","DnsTxtToken"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cdnProvidedCertificateTypeDcvMethodPropEnum = append(cdnProvidedCertificateTypeDcvMethodPropEnum, v)
	}
}

const (

	// CdnProvidedCertificateDcvMethodEmail captures enum value "Email"
	CdnProvidedCertificateDcvMethodEmail string = "Email"

	// CdnProvidedCertificateDcvMethodDNSCnameToken captures enum value "DnsCnameToken"
	CdnProvidedCertificateDcvMethodDNSCnameToken string = "DnsCnameToken"

	// CdnProvidedCertificateDcvMethodDNSTxtToken captures enum value "DnsTxtToken"
	CdnProvidedCertificateDcvMethodDNSTxtToken string = "DnsTxtToken"
)

// prop value enum
func (m *CdnProvidedCertificate) validateDcvMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cdnProvidedCertificateTypeDcvMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CdnProvidedCertificate) validateDcvMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.DcvMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateDcvMethodEnum("dcv_method", "body", m.DcvMethod); err != nil {
		return err
	}

	return nil
}

func (m *CdnProvidedCertificate) validateDeployments(formats strfmt.Registry) error {
	if swag.IsZero(m.Deployments) { // not required
		return nil
	}

	for i := 0; i < len(m.Deployments); i++ {
		if swag.IsZero(m.Deployments[i]) { // not required
			continue
		}

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdnProvidedCertificate) validateDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.Domains) { // not required
		return nil
	}

	for i := 0; i < len(m.Domains); i++ {
		if swag.IsZero(m.Domains[i]) { // not required
			continue
		}

		if m.Domains[i] != nil {
			if err := m.Domains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("domains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdnProvidedCertificate) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_date", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CdnProvidedCertificate) validateLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CdnProvidedCertificate) validateModifiedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modified_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modified_by")
			}
			return err
		}
	}

	return nil
}

func (m *CdnProvidedCertificate) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

var cdnProvidedCertificateTypeRequestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Basic","Enterprise","Custom","AzureCustom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cdnProvidedCertificateTypeRequestTypePropEnum = append(cdnProvidedCertificateTypeRequestTypePropEnum, v)
	}
}

const (

	// CdnProvidedCertificateRequestTypeBasic captures enum value "Basic"
	CdnProvidedCertificateRequestTypeBasic string = "Basic"

	// CdnProvidedCertificateRequestTypeEnterprise captures enum value "Enterprise"
	CdnProvidedCertificateRequestTypeEnterprise string = "Enterprise"

	// CdnProvidedCertificateRequestTypeCustom captures enum value "Custom"
	CdnProvidedCertificateRequestTypeCustom string = "Custom"

	// CdnProvidedCertificateRequestTypeAzureCustom captures enum value "AzureCustom"
	CdnProvidedCertificateRequestTypeAzureCustom string = "AzureCustom"
)

// prop value enum
func (m *CdnProvidedCertificate) validateRequestTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cdnProvidedCertificateTypeRequestTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CdnProvidedCertificate) validateRequestType(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestTypeEnum("request_type", "body", m.RequestType); err != nil {
		return err
	}

	return nil
}

var cdnProvidedCertificateTypeValidationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","DV","OV","EV"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cdnProvidedCertificateTypeValidationTypePropEnum = append(cdnProvidedCertificateTypeValidationTypePropEnum, v)
	}
}

const (

	// CdnProvidedCertificateValidationTypeNone captures enum value "None"
	CdnProvidedCertificateValidationTypeNone string = "None"

	// CdnProvidedCertificateValidationTypeDV captures enum value "DV"
	CdnProvidedCertificateValidationTypeDV string = "DV"

	// CdnProvidedCertificateValidationTypeOV captures enum value "OV"
	CdnProvidedCertificateValidationTypeOV string = "OV"

	// CdnProvidedCertificateValidationTypeEV captures enum value "EV"
	CdnProvidedCertificateValidationTypeEV string = "EV"
)

// prop value enum
func (m *CdnProvidedCertificate) validateValidationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cdnProvidedCertificateTypeValidationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CdnProvidedCertificate) validateValidationType(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateValidationTypeEnum("validation_type", "body", m.ValidationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cdn provided certificate based on the context it is used
func (m *CdnProvidedCertificate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdnProvidedCertificate) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *CdnProvidedCertificate) contextValidateDeployments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Deployments); i++ {

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdnProvidedCertificate) contextValidateDomains(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Domains); i++ {

		if m.Domains[i] != nil {
			if err := m.Domains[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("domains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdnProvidedCertificate) contextValidateModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modified_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modified_by")
			}
			return err
		}
	}

	return nil
}

func (m *CdnProvidedCertificate) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {
		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdnProvidedCertificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdnProvidedCertificate) UnmarshalBinary(b []byte) error {
	var res CdnProvidedCertificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

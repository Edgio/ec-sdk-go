// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Domain domain
//
// swagger:model Domain
type Domain struct {

	// active date
	// Format: date-time
	ActiveDate strfmt.DateTime `json:"active_date,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is common name
	IsCommonName bool `json:"is_common_name,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// status
	// Enum: [ProvisioningInitiated AwaitingCertificateAuthority Active PendingDelete Delete PendingDns Rejected TimedOut PendingReissue SecretRejected]
	Status string `json:"status,omitempty"`
}

// Validate validates this domain
func (m *Domain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Domain) validateActiveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("active_date", "body", "date-time", m.ActiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Domain) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

var domainTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ProvisioningInitiated","AwaitingCertificateAuthority","Active","PendingDelete","Delete","PendingDns","Rejected","TimedOut","PendingReissue","SecretRejected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainTypeStatusPropEnum = append(domainTypeStatusPropEnum, v)
	}
}

const (

	// DomainStatusProvisioningInitiated captures enum value "ProvisioningInitiated"
	DomainStatusProvisioningInitiated string = "ProvisioningInitiated"

	// DomainStatusAwaitingCertificateAuthority captures enum value "AwaitingCertificateAuthority"
	DomainStatusAwaitingCertificateAuthority string = "AwaitingCertificateAuthority"

	// DomainStatusActive captures enum value "Active"
	DomainStatusActive string = "Active"

	// DomainStatusPendingDelete captures enum value "PendingDelete"
	DomainStatusPendingDelete string = "PendingDelete"

	// DomainStatusDelete captures enum value "Delete"
	DomainStatusDelete string = "Delete"

	// DomainStatusPendingDNS captures enum value "PendingDns"
	DomainStatusPendingDNS string = "PendingDns"

	// DomainStatusRejected captures enum value "Rejected"
	DomainStatusRejected string = "Rejected"

	// DomainStatusTimedOut captures enum value "TimedOut"
	DomainStatusTimedOut string = "TimedOut"

	// DomainStatusPendingReissue captures enum value "PendingReissue"
	DomainStatusPendingReissue string = "PendingReissue"

	// DomainStatusSecretRejected captures enum value "SecretRejected"
	DomainStatusSecretRejected string = "SecretRejected"
)

// prop value enum
func (m *Domain) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Domain) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain based on context it is used
func (m *Domain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Domain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Domain) UnmarshalBinary(b []byte) error {
	var res Domain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

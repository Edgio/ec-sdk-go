// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateRequestBase certificate request base
//
// swagger:model CertificateRequestBase
type CertificateRequestBase struct {

	// at id
	AtID string `json:"@id,omitempty"`

	// at type
	AtType string `json:"@type,omitempty"`

	// auto renew
	AutoRenew bool `json:"auto_renew,omitempty"`

	// certificate label
	CertificateLabel string `json:"certificate_label,omitempty"`

	//dcv type
	DcvMethod string `json:"dcv_method,omitempty"`

	//validation status
	ValidationType string `json:"validation_type,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// created by
	CreatedBy *Actor `json:"created_by,omitempty"`

	// deployments
	Deployments []*RequestDeployment `json:"deployments"`

	// domains
	Domains []*Domain `json:"domains"`

	// organization
	Organization *OrganizationDetail `json:"organization"`

	// description
	Description string `json:"description,omitempty"`

	// expiration date
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expiration_date,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last modified
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// modified by
	ModifiedBy *Actor `json:"modified_by,omitempty"`

	// request type
	// Enum: [Basic Enterprise Custom AzureCustom]
	RequestType string `json:"request_type,omitempty"`

	// thumbprint
	Thumbprint string `json:"thumbprint,omitempty"`

	// workflow error message
	WorkflowErrorMessage string `json:"workflow_error_message,omitempty"`
}

// Validate validates this certificate request base
func (m *CertificateRequestBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateRequestBase) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateRequestBase) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateRequestBase) validateDeployments(formats strfmt.Registry) error {
	if swag.IsZero(m.Deployments) { // not required
		return nil
	}

	for i := 0; i < len(m.Deployments); i++ {
		if swag.IsZero(m.Deployments[i]) { // not required
			continue
		}

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateRequestBase) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_date", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateRequestBase) validateLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateRequestBase) validateModifiedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedBy) { // not required
		return nil
	}

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modified_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modified_by")
			}
			return err
		}
	}

	return nil
}

var certificateRequestBaseTypeRequestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Basic","Enterprise","Custom","AzureCustom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certificateRequestBaseTypeRequestTypePropEnum = append(certificateRequestBaseTypeRequestTypePropEnum, v)
	}
}

const (

	// CertificateRequestBaseRequestTypeBasic captures enum value "Basic"
	CertificateRequestBaseRequestTypeBasic string = "Basic"

	// CertificateRequestBaseRequestTypeEnterprise captures enum value "Enterprise"
	CertificateRequestBaseRequestTypeEnterprise string = "Enterprise"

	// CertificateRequestBaseRequestTypeCustom captures enum value "Custom"
	CertificateRequestBaseRequestTypeCustom string = "Custom"

	// CertificateRequestBaseRequestTypeAzureCustom captures enum value "AzureCustom"
	CertificateRequestBaseRequestTypeAzureCustom string = "AzureCustom"
)

// prop value enum
func (m *CertificateRequestBase) validateRequestTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, certificateRequestBaseTypeRequestTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CertificateRequestBase) validateRequestType(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestTypeEnum("request_type", "body", m.RequestType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this certificate request base based on the context it is used
func (m *CertificateRequestBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateRequestBase) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateRequestBase) contextValidateDeployments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Deployments); i++ {

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateRequestBase) contextValidateModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.ModifiedBy != nil {
		if err := m.ModifiedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modified_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modified_by")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateRequestBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateRequestBase) UnmarshalBinary(b []byte) error {
	var res CertificateRequestBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

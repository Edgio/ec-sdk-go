// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
WAF API

The WAF API is a RESTful server application for managing customer configuration settings.

API version: 1.0
*/

package waf_bot_manager

import (
	"encoding/json"
)

// ResponseHeader struct for ResponseHeader
type ResponseHeader struct {
	Key                  *string `json:"key,omitempty"`
	Value                *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResponseHeader ResponseHeader

// NewResponseHeader instantiates a new ResponseHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseHeader() *ResponseHeader {
	this := ResponseHeader{}
	return &this
}

// NewResponseHeaderWithDefaults instantiates a new ResponseHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseHeaderWithDefaults() *ResponseHeader {
	this := ResponseHeader{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ResponseHeader) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseHeader) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ResponseHeader) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ResponseHeader) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ResponseHeader) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseHeader) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ResponseHeader) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ResponseHeader) SetValue(v string) {
	o.Value = &v
}

func (o ResponseHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ResponseHeader) UnmarshalJSON(bytes []byte) (err error) {
	varResponseHeader := _ResponseHeader{}

	if err = json.Unmarshal(bytes, &varResponseHeader); err == nil {
		*o = ResponseHeader(varResponseHeader)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseHeader struct {
	value *ResponseHeader
	isSet bool
}

func (v NullableResponseHeader) Get() *ResponseHeader {
	return v.value
}

func (v *NullableResponseHeader) Set(val *ResponseHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseHeader(val ResponseHeader) NullableResponseHeader {
	return NullableResponseHeader{value: &val, isSet: true}
}

func (v NullableResponseHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

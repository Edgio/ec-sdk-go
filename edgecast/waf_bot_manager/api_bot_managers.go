// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
WAF API

The WAF API is a RESTful server application for managing customer configuration settings.

API version: 1.0
*/

package waf_bot_manager

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

// BotManagersClient is the concrete client implementation for BotManagers
type BotManagersClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

// NewBotManagersClient creates a new instance of BotManagersClient
func NewBotManagersClient(
	c ecclient.APIClient,
	baseAPIURL string,
) BotManagersClient {
	return BotManagersClient{c, baseAPIURL}
}

// BotManagersClientService defines the operations for BotManagers
type BotManagersClientService interface {
	CreateBotManager(
		params CreateBotManagerParams,
	) (*ResponseObj, error)

	DeleteBotManager(
		params DeleteBotManagerParams,
	) error

	GetBotManager(
		params GetBotManagerParams,
	) (*BotManager, error)

	GetBotManagers(
		params GetBotManagersParams,
	) ([]ObjShort, error)

	UpdateBotManager(
		params UpdateBotManagerParams,
	) error
}

// CreateBotManagerParams contains the parameters for CreateBotManager
type CreateBotManagerParams struct {
	// The customer id
	CustId string

	BotManagerInfo BotManager
}

// NewCreateBotManagerParams creates a new instance of CreateBotManagerParams
func NewCreateBotManagerParams() CreateBotManagerParams {
	return CreateBotManagerParams{}
}

// CreateBotManager - POST Bot Manager
//
//	Create a new Bot Manager for a given customer.
func (c BotManagersClient) CreateBotManager(
	params CreateBotManagerParams,
) (*ResponseObj, error) {
	req, err := buildCreateBotManagerRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := ResponseObj{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("CreateBotManager: %w", err)
	}

	return &parsedResponse, nil
}

func buildCreateBotManagerRequest(
	p CreateBotManagerParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{cust_id}/waf/v1.0/bot-manager"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		errs = append(errs, fmt.Errorf("CreateBotManager: %w", err))
	}

	req.Method = method

	req.PathParams["cust_id"] = p.CustId

	req.RawBody = p.BotManagerInfo

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// DeleteBotManagerParams contains the parameters for DeleteBotManager
type DeleteBotManagerParams struct {
	// The customer id
	CustId string

	// The Bot Manager id
	BotManagerId string
}

// NewDeleteBotManagerParams creates a new instance of DeleteBotManagerParams
func NewDeleteBotManagerParams() DeleteBotManagerParams {
	return DeleteBotManagerParams{}
}

// DeleteBotManager - DELETE Bot Manager Object
//
//	Delete a Bot Manager object identified by id.
func (c BotManagersClient) DeleteBotManager(
	params DeleteBotManagerParams,
) error {
	req, err := buildDeleteBotManagerRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("DeleteBotManager: %w", err)
	}

	return nil
}

func buildDeleteBotManagerRequest(
	p DeleteBotManagerParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{cust_id}/waf/v1.0/bot-manager/{bot_manager_id}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Delete")
	if err != nil {
		errs = append(errs, fmt.Errorf("DeleteBotManager: %w", err))
	}

	req.Method = method

	req.PathParams["cust_id"] = p.CustId

	req.PathParams["bot_manager_id"] = p.BotManagerId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetBotManagerParams contains the parameters for GetBotManager
type GetBotManagerParams struct {
	// The customer id
	CustId string

	// The Bot Manager id
	BotManagerId string
}

// NewGetBotManagerParams creates a new instance of GetBotManagerParams
func NewGetBotManagerParams() GetBotManagerParams {
	return GetBotManagerParams{}
}

// GetBotManager - GET Bot Manager Object
//
//	Get a Bot Manager object from a Bot Manager id.
func (c BotManagersClient) GetBotManager(
	params GetBotManagerParams,
) (*BotManager, error) {
	req, err := buildGetBotManagerRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := BotManager{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetBotManager: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetBotManagerRequest(
	p GetBotManagerParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{cust_id}/waf/v1.0/bot-manager/{bot_manager_id}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetBotManager: %w", err))
	}

	req.Method = method

	req.PathParams["cust_id"] = p.CustId

	req.PathParams["bot_manager_id"] = p.BotManagerId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetBotManagersParams contains the parameters for GetBotManagers
type GetBotManagersParams struct {
	// The customer id
	CustId string
}

// NewGetBotManagersParams creates a new instance of GetBotManagersParams
func NewGetBotManagersParams() GetBotManagersParams {
	return GetBotManagersParams{}
}

// GetBotManagers - GET Bot Managers
//
//	List all Bot Managers for a given customer.
func (c BotManagersClient) GetBotManagers(
	params GetBotManagersParams,
) ([]ObjShort, error) {
	req, err := buildGetBotManagersRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]ObjShort, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetBotManagers: %w", err)
	}

	return parsedResponse, nil
}

func buildGetBotManagersRequest(
	p GetBotManagersParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{cust_id}/waf/v1.0/bot-manager"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetBotManagers: %w", err))
	}

	req.Method = method

	req.PathParams["cust_id"] = p.CustId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// UpdateBotManagerParams contains the parameters for UpdateBotManager
type UpdateBotManagerParams struct {
	// The customer id
	CustId string

	// The Bot Manager id
	BotManagerId string

	BotManagerInfo BotManager
}

// NewUpdateBotManagerParams creates a new instance of UpdateBotManagerParams
func NewUpdateBotManagerParams() UpdateBotManagerParams {
	return UpdateBotManagerParams{}
}

// UpdateBotManager - PUT Bot Manager Object
//
//	Modify a Bot Manager object identified by id.
func (c BotManagersClient) UpdateBotManager(
	params UpdateBotManagerParams,
) error {
	req, err := buildUpdateBotManagerRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("UpdateBotManager: %w", err)
	}

	return nil
}

func buildUpdateBotManagerRequest(
	p UpdateBotManagerParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{cust_id}/waf/v1.0/bot-manager/{bot_manager_id}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		errs = append(errs, fmt.Errorf("UpdateBotManager: %w", err))
	}

	req.Method = method

	req.PathParams["cust_id"] = p.CustId

	req.PathParams["bot_manager_id"] = p.BotManagerId

	req.RawBody = p.BotManagerInfo

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

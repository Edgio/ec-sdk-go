// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
WAF API

The WAF API is a RESTful server application for managing customer configuration settings.

API version: 1.0
*/

package waf_bot_manager

import (
	"encoding/json"
)

// AlertAction struct for AlertAction
type AlertAction struct {
	Id                   *string `json:"id,omitempty"`
	Name                 *string `json:"name,omitempty"`
	EnfType              *string `json:"enf_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlertAction AlertAction

// NewAlertAction instantiates a new AlertAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertAction() *AlertAction {
	this := AlertAction{}
	return &this
}

// NewAlertActionWithDefaults instantiates a new AlertAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertActionWithDefaults() *AlertAction {
	this := AlertAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertAction) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertAction) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertAction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlertAction) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlertAction) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertAction) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlertAction) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlertAction) SetName(v string) {
	o.Name = &v
}

// GetEnfType returns the EnfType field value if set, zero value otherwise.
func (o *AlertAction) GetEnfType() string {
	if o == nil || o.EnfType == nil {
		var ret string
		return ret
	}
	return *o.EnfType
}

// GetEnfTypeOk returns a tuple with the EnfType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertAction) GetEnfTypeOk() (*string, bool) {
	if o == nil || o.EnfType == nil {
		return nil, false
	}
	return o.EnfType, true
}

// HasEnfType returns a boolean if a field has been set.
func (o *AlertAction) HasEnfType() bool {
	if o != nil && o.EnfType != nil {
		return true
	}

	return false
}

// SetEnfType gets a reference to the given string and assigns it to the EnfType field.
func (o *AlertAction) SetEnfType(v string) {
	o.EnfType = &v
}

func (o AlertAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.EnfType != nil {
		toSerialize["enf_type"] = o.EnfType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AlertAction) UnmarshalJSON(bytes []byte) (err error) {
	varAlertAction := _AlertAction{}

	if err = json.Unmarshal(bytes, &varAlertAction); err == nil {
		*o = AlertAction(varAlertAction)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "enf_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlertAction struct {
	value *AlertAction
	isSet bool
}

func (v NullableAlertAction) Get() *AlertAction {
	return v.value
}

func (v *NullableAlertAction) Set(val *AlertAction) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertAction(val AlertAction) NullableAlertAction {
	return NullableAlertAction{value: &val, isSet: true}
}

func (v NullableAlertAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
WAF API

The WAF API is a RESTful server application for managing customer configuration settings.

API version: 1.0
*/

package waf_bot_manager

import (
	"encoding/json"
)

// RecaptchaAction struct for RecaptchaAction
type RecaptchaAction struct {
	Id                   *string `json:"id,omitempty"`
	Name                 *string `json:"name,omitempty"`
	EnfType              *string `json:"enf_type,omitempty"`
	ValidForSec          *int32  `json:"valid_for_sec,omitempty"`
	Status               *int32  `json:"status,omitempty"`
	FailedActionType	 *string `json:"failed_action_type"`
	AdditionalProperties map[string]interface{}
}

type _RecaptchaAction RecaptchaAction

// NewRecaptchaAction instantiates a new RecaptchaAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecaptchaAction() *RecaptchaAction {
	this := RecaptchaAction{}
	return &this
}

// NewRecaptchaActionWithDefaults instantiates a new RecaptchaAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecaptchaActionWithDefaults() *RecaptchaAction {
	this := RecaptchaAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RecaptchaAction) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecaptchaAction) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RecaptchaAction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RecaptchaAction) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecaptchaAction) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecaptchaAction) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecaptchaAction) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecaptchaAction) SetName(v string) {
	o.Name = &v
}

// GetEnfType returns the EnfType field value if set, zero value otherwise.
func (o *RecaptchaAction) GetEnfType() string {
	if o == nil || o.EnfType == nil {
		var ret string
		return ret
	}
	return *o.EnfType
}

// GetEnfTypeOk returns a tuple with the EnfType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecaptchaAction) GetEnfTypeOk() (*string, bool) {
	if o == nil || o.EnfType == nil {
		return nil, false
	}
	return o.EnfType, true
}

// HasEnfType returns a boolean if a field has been set.
func (o *RecaptchaAction) HasEnfType() bool {
	if o != nil && o.EnfType != nil {
		return true
	}

	return false
}

// SetEnfType gets a reference to the given string and assigns it to the EnfType field.
func (o *RecaptchaAction) SetEnfType(v string) {
	o.EnfType = &v
}

// GetValidForSec returns the ValidForSec field value if set, zero value otherwise.
func (o *RecaptchaAction) GetValidForSec() int32 {
	if o == nil || o.ValidForSec == nil {
		var ret int32
		return ret
	}
	return *o.ValidForSec
}

// GetValidForSecOk returns a tuple with the ValidForSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecaptchaAction) GetValidForSecOk() (*int32, bool) {
	if o == nil || o.ValidForSec == nil {
		return nil, false
	}
	return o.ValidForSec, true
}

// HasValidForSec returns a boolean if a field has been set.
func (o *RecaptchaAction) HasValidForSec() bool {
	if o != nil && o.ValidForSec != nil {
		return true
	}

	return false
}

// SetValidForSec gets a reference to the given int32 and assigns it to the ValidForSec field.
func (o *RecaptchaAction) SetValidForSec(v int32) {
	o.ValidForSec = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RecaptchaAction) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecaptchaAction) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RecaptchaAction) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *RecaptchaAction) SetStatus(v int32) {
	o.Status = &v
}

// GetFailedActionType returns the FailedActionType field value if set, zero value otherwise.
func (o *RecaptchaAction) GetFailedActionType() string {
	if o == nil || o.FailedActionType == nil {
		var ret string
		return ret
	}
	return *o.FailedActionType
}

// GetFailedActionTypeOk returns a tuple with the FailedActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecaptchaAction) GetFailedActionTypeOk() (*string, bool) {
	if o == nil || o.FailedActionType == nil {
		return nil, false
	}
	return o.FailedActionType, true
}

// HasFailedActionType returns a boolean if a field has been set.
func (o *RecaptchaAction) HasFailedActionType() bool {
	if o != nil && o.FailedActionType != nil {
		return true
	}

	return false
}

// SetFailedActionType gets a reference to the given string and assigns it to the FailedActionType field.
func (o *RecaptchaAction) SetFailedActionType(v string) {
	o.FailedActionType = &v
}

func (o RecaptchaAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.EnfType != nil {
		toSerialize["enf_type"] = o.EnfType
	}
	if o.ValidForSec != nil {
		toSerialize["valid_for_sec"] = o.ValidForSec
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.FailedActionType != nil {
		toSerialize["failed_action_type"] = o.FailedActionType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *RecaptchaAction) UnmarshalJSON(bytes []byte) (err error) {
	varRecaptchaAction := _RecaptchaAction{}

	if err = json.Unmarshal(bytes, &varRecaptchaAction); err == nil {
		*o = RecaptchaAction(varRecaptchaAction)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "enf_type")
		delete(additionalProperties, "valid_for_sec")
		delete(additionalProperties, "status")
		delete(additionalProperties, "failed_action_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRecaptchaAction struct {
	value *RecaptchaAction
	isSet bool
}

func (v NullableRecaptchaAction) Get() *RecaptchaAction {
	return v.value
}

func (v *NullableRecaptchaAction) Set(val *RecaptchaAction) {
	v.value = val
	v.isSet = true
}

func (v NullableRecaptchaAction) IsSet() bool {
	return v.isSet
}

func (v *NullableRecaptchaAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecaptchaAction(val RecaptchaAction) NullableRecaptchaAction {
	return NullableRecaptchaAction{value: &val, isSet: true}
}

func (v NullableRecaptchaAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecaptchaAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

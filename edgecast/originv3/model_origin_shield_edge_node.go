// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"encoding/json"
)

// OriginShieldEdgeNode struct for OriginShieldEdgeNode
type OriginShieldEdgeNode struct {
	RegionId             *int32            `json:"region_id,omitempty"`
	RegionName           *string           `json:"region_name,omitempty"`
	BypassCode           *string           `json:"bypass_code,omitempty"`
	BypassName           *string           `json:"bypass_name,omitempty"`
	Pops                 []OriginShieldPop `json:"pops,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OriginShieldEdgeNode OriginShieldEdgeNode

// NewOriginShieldEdgeNode instantiates a new OriginShieldEdgeNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOriginShieldEdgeNode() *OriginShieldEdgeNode {
	this := OriginShieldEdgeNode{}
	return &this
}

// NewOriginShieldEdgeNodeWithDefaults instantiates a new OriginShieldEdgeNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOriginShieldEdgeNodeWithDefaults() *OriginShieldEdgeNode {
	this := OriginShieldEdgeNode{}
	return &this
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *OriginShieldEdgeNode) GetRegionId() int32 {
	if o == nil || o.RegionId == nil {
		var ret int32
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginShieldEdgeNode) GetRegionIdOk() (*int32, bool) {
	if o == nil || o.RegionId == nil {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *OriginShieldEdgeNode) HasRegionId() bool {
	if o != nil && o.RegionId != nil {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given int32 and assigns it to the RegionId field.
func (o *OriginShieldEdgeNode) SetRegionId(v int32) {
	o.RegionId = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *OriginShieldEdgeNode) GetRegionName() string {
	if o == nil || o.RegionName == nil {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginShieldEdgeNode) GetRegionNameOk() (*string, bool) {
	if o == nil || o.RegionName == nil {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *OriginShieldEdgeNode) HasRegionName() bool {
	if o != nil && o.RegionName != nil {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *OriginShieldEdgeNode) SetRegionName(v string) {
	o.RegionName = &v
}

// GetBypassCode returns the BypassCode field value if set, zero value otherwise.
func (o *OriginShieldEdgeNode) GetBypassCode() string {
	if o == nil || o.BypassCode == nil {
		var ret string
		return ret
	}
	return *o.BypassCode
}

// GetBypassCodeOk returns a tuple with the BypassCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginShieldEdgeNode) GetBypassCodeOk() (*string, bool) {
	if o == nil || o.BypassCode == nil {
		return nil, false
	}
	return o.BypassCode, true
}

// HasBypassCode returns a boolean if a field has been set.
func (o *OriginShieldEdgeNode) HasBypassCode() bool {
	if o != nil && o.BypassCode != nil {
		return true
	}

	return false
}

// SetBypassCode gets a reference to the given string and assigns it to the BypassCode field.
func (o *OriginShieldEdgeNode) SetBypassCode(v string) {
	o.BypassCode = &v
}

// GetBypassName returns the BypassName field value if set, zero value otherwise.
func (o *OriginShieldEdgeNode) GetBypassName() string {
	if o == nil || o.BypassName == nil {
		var ret string
		return ret
	}
	return *o.BypassName
}

// GetBypassNameOk returns a tuple with the BypassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginShieldEdgeNode) GetBypassNameOk() (*string, bool) {
	if o == nil || o.BypassName == nil {
		return nil, false
	}
	return o.BypassName, true
}

// HasBypassName returns a boolean if a field has been set.
func (o *OriginShieldEdgeNode) HasBypassName() bool {
	if o != nil && o.BypassName != nil {
		return true
	}

	return false
}

// SetBypassName gets a reference to the given string and assigns it to the BypassName field.
func (o *OriginShieldEdgeNode) SetBypassName(v string) {
	o.BypassName = &v
}

// GetPops returns the Pops field value if set, zero value otherwise.
func (o *OriginShieldEdgeNode) GetPops() []OriginShieldPop {
	if o == nil || o.Pops == nil {
		var ret []OriginShieldPop
		return ret
	}
	return o.Pops
}

// GetPopsOk returns a tuple with the Pops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginShieldEdgeNode) GetPopsOk() ([]OriginShieldPop, bool) {
	if o == nil || o.Pops == nil {
		return nil, false
	}
	return o.Pops, true
}

// HasPops returns a boolean if a field has been set.
func (o *OriginShieldEdgeNode) HasPops() bool {
	if o != nil && o.Pops != nil {
		return true
	}

	return false
}

// SetPops gets a reference to the given []OriginShieldPop and assigns it to the Pops field.
func (o *OriginShieldEdgeNode) SetPops(v []OriginShieldPop) {
	o.Pops = v
}

func (o OriginShieldEdgeNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RegionId != nil {
		toSerialize["region_id"] = o.RegionId
	}
	if o.RegionName != nil {
		toSerialize["region_name"] = o.RegionName
	}
	if o.BypassCode != nil {
		toSerialize["bypass_code"] = o.BypassCode
	}
	if o.BypassName != nil {
		toSerialize["bypass_name"] = o.BypassName
	}
	if o.Pops != nil {
		toSerialize["pops"] = o.Pops
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OriginShieldEdgeNode) UnmarshalJSON(bytes []byte) (err error) {
	varOriginShieldEdgeNode := _OriginShieldEdgeNode{}

	if err = json.Unmarshal(bytes, &varOriginShieldEdgeNode); err == nil {
		*o = OriginShieldEdgeNode(varOriginShieldEdgeNode)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "region_id")
		delete(additionalProperties, "region_name")
		delete(additionalProperties, "bypass_code")
		delete(additionalProperties, "bypass_name")
		delete(additionalProperties, "pops")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOriginShieldEdgeNode struct {
	value *OriginShieldEdgeNode
	isSet bool
}

func (v NullableOriginShieldEdgeNode) Get() *OriginShieldEdgeNode {
	return v.value
}

func (v *NullableOriginShieldEdgeNode) Set(val *OriginShieldEdgeNode) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginShieldEdgeNode) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginShieldEdgeNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginShieldEdgeNode(val OriginShieldEdgeNode) NullableOriginShieldEdgeNode {
	return NullableOriginShieldEdgeNode{value: &val, isSet: true}
}

func (v NullableOriginShieldEdgeNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginShieldEdgeNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"encoding/json"
)

// FailoverOrder struct for FailoverOrder
type FailoverOrder struct {
	Id                   float32 `json:"id"`
	Host                 string  `json:"host"`
	FailoverOrder        int32   `json:"failover_order"`
	AdditionalProperties map[string]interface{}
}

type _FailoverOrder FailoverOrder

// NewFailoverOrder instantiates a new FailoverOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverOrder(id float32, host string, failoverOrder int32) *FailoverOrder {
	this := FailoverOrder{}
	this.Id = id
	this.Host = host
	this.FailoverOrder = failoverOrder
	return &this
}

// NewFailoverOrderWithDefaults instantiates a new FailoverOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverOrderWithDefaults() *FailoverOrder {
	this := FailoverOrder{}
	return &this
}

// GetId returns the Id field value
func (o *FailoverOrder) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FailoverOrder) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FailoverOrder) SetId(v float32) {
	o.Id = v
}

// GetHost returns the Host field value
func (o *FailoverOrder) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *FailoverOrder) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *FailoverOrder) SetHost(v string) {
	o.Host = v
}

// GetFailoverOrder returns the FailoverOrder field value
func (o *FailoverOrder) GetFailoverOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FailoverOrder
}

// GetFailoverOrderOk returns a tuple with the FailoverOrder field value
// and a boolean to check if the value has been set.
func (o *FailoverOrder) GetFailoverOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailoverOrder, true
}

// SetFailoverOrder sets field value
func (o *FailoverOrder) SetFailoverOrder(v int32) {
	o.FailoverOrder = v
}

func (o FailoverOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["host"] = o.Host
	}
	if true {
		toSerialize["failover_order"] = o.FailoverOrder
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *FailoverOrder) UnmarshalJSON(bytes []byte) (err error) {
	varFailoverOrder := _FailoverOrder{}

	if err = json.Unmarshal(bytes, &varFailoverOrder); err == nil {
		*o = FailoverOrder(varFailoverOrder)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "host")
		delete(additionalProperties, "failover_order")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFailoverOrder struct {
	value *FailoverOrder
	isSet bool
}

func (v NullableFailoverOrder) Get() *FailoverOrder {
	return v.value
}

func (v *NullableFailoverOrder) Set(val *FailoverOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverOrder(val FailoverOrder) NullableFailoverOrder {
	return NullableFailoverOrder{value: &val, isSet: true}
}

func (v NullableFailoverOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

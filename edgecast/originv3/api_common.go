// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

// CommonClient is the concrete client implementation for Common
type CommonClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

// NewCommonClient creates a new instance of CommonClient
func NewCommonClient(
	c ecclient.APIClient,
	baseAPIURL string,
) CommonClient {
	return CommonClient{c, baseAPIURL}
}

// CommonClientService defines the operations for Common
type CommonClientService interface {
	AddOrigin(
		params AddOriginParams,
	) (*CustomerOrigin, error)

	DeleteGroup(
		params DeleteGroupParams,
	) error

	DeleteOrigin(
		params DeleteOriginParams,
	) error

	GetAllOrigins(
		params GetAllOriginsParams,
	) ([]CustomerOrigin, error)

	GetEdgeFunctions(
		params GetEdgeFunctionsParams,
	) ([]EdgeFunction, error)

	GetGroupStatus(
		params GetGroupStatusParams,
	) (*CustomerOriginStatus, error)

	GetOrigin(
		params GetOriginParams,
	) (*CustomerOrigin, error)

	GetOriginsByGroup(
		params GetOriginsByGroupParams,
	) ([]CustomerOriginFailoverOrder, error)

	UpdateFailoverOrder(
		params UpdateFailoverOrderParams,
	) error

	UpdateOrigin(
		params UpdateOriginParams,
	) (*CustomerOrigin, error)
}

// AddOriginParams contains the parameters for AddOrigin
type AddOriginParams struct {
	// http-large or adn
	MediaType string

	// The Customer Origin without id
	CustomerOriginRequest CustomerOriginRequest
}

// NewAddOriginParams creates a new instance of AddOriginParams
func NewAddOriginParams() AddOriginParams {
	return AddOriginParams{}
}

// AddOrigin - Create new Customer origin
//
//	Create new Customer Origin
func (c CommonClient) AddOrigin(
	params AddOriginParams,
) (*CustomerOrigin, error) {
	req, err := buildAddOriginRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOrigin{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("AddOrigin: %w", err)
	}

	return &parsedResponse, nil
}

func buildAddOriginRequest(
	p AddOriginParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		errs = append(errs, fmt.Errorf("AddOrigin: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.RawBody = p.CustomerOriginRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// DeleteGroupParams contains the parameters for DeleteGroup
type DeleteGroupParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId int32
}

// NewDeleteGroupParams creates a new instance of DeleteGroupParams
func NewDeleteGroupParams() DeleteGroupParams {
	return DeleteGroupParams{}
}

// DeleteGroup - Delete a customer origin group by id
//
//	Delete a Customer Origin Group by id
func (c CommonClient) DeleteGroup(
	params DeleteGroupParams,
) error {
	req, err := buildDeleteGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("DeleteGroup: %w", err)
	}

	return nil
}

func buildDeleteGroupRequest(
	p DeleteGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/groups/{groupId}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Delete")
	if err != nil {
		errs = append(errs, fmt.Errorf("DeleteGroup: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = NumberToString(p.GroupId)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// DeleteOriginParams contains the parameters for DeleteOrigin
type DeleteOriginParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Id
	Id int32
}

// NewDeleteOriginParams creates a new instance of DeleteOriginParams
func NewDeleteOriginParams() DeleteOriginParams {
	return DeleteOriginParams{}
}

// DeleteOrigin - Delete a customer origin by id
//
//	Delete an individual Customer Origin
func (c CommonClient) DeleteOrigin(
	params DeleteOriginParams,
) error {
	req, err := buildDeleteOriginRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("DeleteOrigin: %w", err)
	}

	return nil
}

func buildDeleteOriginRequest(
	p DeleteOriginParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/{id}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Delete")
	if err != nil {
		errs = append(errs, fmt.Errorf("DeleteOrigin: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["id"] = NumberToString(p.Id)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetAllOriginsParams contains the parameters for GetAllOrigins
type GetAllOriginsParams struct {
	// http-large or adn
	MediaType string

	// [false | true] only. Get Error with another value
	Ascending bool

	// In range [1, 1000]
	PageSize int32

	// In range [1, 1000]
	PageNumber int32

	Sortby string
}

// NewGetAllOriginsParams creates a new instance of GetAllOriginsParams
func NewGetAllOriginsParams() GetAllOriginsParams {
	return GetAllOriginsParams{}
}

// GetAllOrigins - Get all Customer origins
//
//	Get list of Customer Origin
func (c CommonClient) GetAllOrigins(
	params GetAllOriginsParams,
) ([]CustomerOrigin, error) {
	req, err := buildGetAllOriginsRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]CustomerOrigin, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetAllOrigins: %w", err)
	}

	return parsedResponse, nil
}

func buildGetAllOriginsRequest(
	p GetAllOriginsParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetAllOrigins: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.QueryParams["ascending"] = BoolToString(p.Ascending)

	req.QueryParams["pageSize"] = NumberToString(p.PageSize)

	req.QueryParams["pageNumber"] = NumberToString(p.PageNumber)

	req.QueryParams["sortby"] = p.Sortby

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetEdgeFunctionsParams contains the parameters for GetEdgeFunctions
type GetEdgeFunctionsParams struct {
	// http-large or adn
	MediaType string
}

// NewGetEdgeFunctionsParams creates a new instance of GetEdgeFunctionsParams
func NewGetEdgeFunctionsParams() GetEdgeFunctionsParams {
	return GetEdgeFunctionsParams{}
}

// GetEdgeFunctions - Get edge functions for customer origin
//
//	Get Edge Functions list to be used as Customer Origin
func (c CommonClient) GetEdgeFunctions(
	params GetEdgeFunctionsParams,
) ([]EdgeFunction, error) {
	req, err := buildGetEdgeFunctionsRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]EdgeFunction, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetEdgeFunctions: %w", err)
	}

	return parsedResponse, nil
}

func buildGetEdgeFunctionsRequest(
	p GetEdgeFunctionsParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/edge-functions"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetEdgeFunctions: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetGroupStatusParams contains the parameters for GetGroupStatus
type GetGroupStatusParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId int32
}

// NewGetGroupStatusParams creates a new instance of GetGroupStatusParams
func NewGetGroupStatusParams() GetGroupStatusParams {
	return GetGroupStatusParams{}
}

// GetGroupStatus - Get customer origin group status
//
//	This API operation gets a customer origin status.
func (c CommonClient) GetGroupStatus(
	params GetGroupStatusParams,
) (*CustomerOriginStatus, error) {
	req, err := buildGetGroupStatusRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginStatus{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetGroupStatus: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetGroupStatusRequest(
	p GetGroupStatusParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/groups/{groupId}/status"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetGroupStatus: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = NumberToString(p.GroupId)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetOriginParams contains the parameters for GetOrigin
type GetOriginParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Id
	Id int32
}

// NewGetOriginParams creates a new instance of GetOriginParams
func NewGetOriginParams() GetOriginParams {
	return GetOriginParams{}
}

// GetOrigin - Get specific Customer origin by id
//
//	Get an individual Customer Origin
func (c CommonClient) GetOrigin(
	params GetOriginParams,
) (*CustomerOrigin, error) {
	req, err := buildGetOriginRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOrigin{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetOrigin: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetOriginRequest(
	p GetOriginParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/{id}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetOrigin: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["id"] = NumberToString(p.Id)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetOriginsByGroupParams contains the parameters for GetOriginsByGroup
type GetOriginsByGroupParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId int32
}

// NewGetOriginsByGroupParams creates a new instance of GetOriginsByGroupParams
func NewGetOriginsByGroupParams() GetOriginsByGroupParams {
	return GetOriginsByGroupParams{}
}

// GetOriginsByGroup - Get all customer origins in a group
//
//	This API operation gets all customer origins in a group.
func (c CommonClient) GetOriginsByGroup(
	params GetOriginsByGroupParams,
) ([]CustomerOriginFailoverOrder, error) {
	req, err := buildGetOriginsByGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]CustomerOriginFailoverOrder, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetOriginsByGroup: %w", err)
	}

	return parsedResponse, nil
}

func buildGetOriginsByGroupRequest(
	p GetOriginsByGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/groups/{groupId}/origins"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetOriginsByGroup: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = NumberToString(p.GroupId)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// UpdateFailoverOrderParams contains the parameters for UpdateFailoverOrder
type UpdateFailoverOrderParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId int32

	FailoverOrder []FailoverOrder
}

// NewUpdateFailoverOrderParams creates a new instance of UpdateFailoverOrderParams
func NewUpdateFailoverOrderParams() UpdateFailoverOrderParams {
	return UpdateFailoverOrderParams{}
}

// UpdateFailoverOrder - Udpate the failover_order of customer origin in group
//
//	Modify the Failover Order in Group
func (c CommonClient) UpdateFailoverOrder(
	params UpdateFailoverOrderParams,
) error {
	req, err := buildUpdateFailoverOrderRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("UpdateFailoverOrder: %w", err)
	}

	return nil
}

func buildUpdateFailoverOrderRequest(
	p UpdateFailoverOrderParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/groups/{groupId}/origins"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Patch")
	if err != nil {
		errs = append(errs, fmt.Errorf("UpdateFailoverOrder: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = NumberToString(p.GroupId)

	req.RawBody = p.FailoverOrder

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// UpdateOriginParams contains the parameters for UpdateOrigin
type UpdateOriginParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Id
	Id int32

	// The modified Customer Origin
	CustomerOriginRequest CustomerOriginRequest
}

// NewUpdateOriginParams creates a new instance of UpdateOriginParams
func NewUpdateOriginParams() UpdateOriginParams {
	return UpdateOriginParams{}
}

// UpdateOrigin - Update an Customer origin by id
//
//	Update an individual Customer Origin
func (c CommonClient) UpdateOrigin(
	params UpdateOriginParams,
) (*CustomerOrigin, error) {
	req, err := buildUpdateOriginRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOrigin{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("UpdateOrigin: %w", err)
	}

	return &parsedResponse, nil
}

func buildUpdateOriginRequest(
	p UpdateOriginParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/{id}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		errs = append(errs, fmt.Errorf("UpdateOrigin: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["id"] = NumberToString(p.Id)

	req.RawBody = p.CustomerOriginRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

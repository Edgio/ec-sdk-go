// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

type CommonClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

func NewCommonClientService(
	c ecclient.APIClient,
	baseAPIURL string,
) CommonClientService {
	return CommonClient{c, baseAPIURL}
}

type CommonClientService interface {
	AddAdn(params AddAdnParams) (*CustomerOrigin, error)

	DeleteMediaTypeGroupsGroupId(params DeleteMediaTypeGroupsGroupIdParams) error

	DeleteMediaTypeId(params DeleteMediaTypeIdParams) error

	GetAdn(params GetAdnParams) ([]CustomerOrigin, error)

	GetAdnId(params GetAdnIdParams) (*CustomerOrigin, error)

	GetMediaTypeEdgeFunctions(params GetMediaTypeEdgeFunctionsParams) ([]EdgeFunction, error)

	GetMediaTypeGroupsIdOrigins(params GetMediaTypeGroupsIdOriginsParams) ([]CustomerOriginFailoverOrder, error)

	GetMediaTypeGroupsIdStatus(params GetMediaTypeGroupsIdStatusParams) (*CustomerOriginStatus, error)

	PatchAdnId(params PatchAdnIdParams) (*CustomerOrigin, error)

	PatchMediaTypeGroupsGroupIdOrigins(params PatchMediaTypeGroupsGroupIdOriginsParams) error

	PatchMediaTypePrimaryId(params PatchMediaTypePrimaryIdParams) (*CustomerOrigin, error)
}

type AddAdnParams struct {
	MediaType      string
	CustomerOrigin CustomerOrigin
}

// BuildAddAdnRequest extracts parameters and sets for the request to be consumed
func BuildAddAdnRequest(p AddAdnParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	params.body = p.CustomerOrigin

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
AddAdn Create new Customer origin

Create new Customer Origin

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@return ApiAddAdnRequest
*/
func (c CommonClient) AddAdn(params AddAdnParams) (*CustomerOrigin, error) {
	req, err := BuildAddAdnRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		return nil, fmt.Errorf("AddAdn: %w", err)
	}

	parsedResponse := CustomerOrigin{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/{mediaType}",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AddAdn: %w", err)
	}

	return &parsedResponse, nil
}

type DeleteMediaTypeGroupsGroupIdParams struct {
	MediaType string
	GroupId   string
}

// BuildDeleteMediaTypeGroupsGroupIdRequest extracts parameters and sets for the request to be consumed
func BuildDeleteMediaTypeGroupsGroupIdRequest(p DeleteMediaTypeGroupsGroupIdParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	params.pathParams["groupId"] = p.GroupId

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
DeleteMediaTypeGroupsGroupId Delete a customer origin group by id

Delete a Customer Origin Group by id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@param groupId Customer Origin Group Id
	@return ApiDeleteMediaTypeGroupsGroupIdRequest
*/
func (c CommonClient) DeleteMediaTypeGroupsGroupId(params DeleteMediaTypeGroupsGroupIdParams) error {
	req, err := BuildDeleteMediaTypeGroupsGroupIdRequest(params)
	if err != nil {
		return err
	}

	method, err := ecclient.ToHTTPMethod("Delete")
	if err != nil {
		return fmt.Errorf("DeleteMediaTypeGroupsGroupId: %w", err)
	}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:      method,
		Path:        c.baseAPIURL + "/{mediaType}/groups/{groupId}",
		RawBody:     req.body,
		PathParams:  req.pathParams,
		QueryParams: req.queryParams,
		Headers:     req.headers,
	})

	if err != nil {
		return fmt.Errorf("DeleteMediaTypeGroupsGroupId: %w", err)
	}

	return nil
}

type DeleteMediaTypeIdParams struct {
	MediaType string
	Id        float32
}

// BuildDeleteMediaTypeIdRequest extracts parameters and sets for the request to be consumed
func BuildDeleteMediaTypeIdRequest(p DeleteMediaTypeIdParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	params.pathParams["id"] = numberToString(p.Id)

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
DeleteMediaTypeId Delete a customer origin by id

Delete an individual Customer Origin

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@param id Customer Origin Id
	@return ApiDeleteMediaTypeIdRequest
*/
func (c CommonClient) DeleteMediaTypeId(params DeleteMediaTypeIdParams) error {
	req, err := BuildDeleteMediaTypeIdRequest(params)
	if err != nil {
		return err
	}

	method, err := ecclient.ToHTTPMethod("Delete")
	if err != nil {
		return fmt.Errorf("DeleteMediaTypeId: %w", err)
	}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:      method,
		Path:        c.baseAPIURL + "/{mediaType}/{id}",
		RawBody:     req.body,
		PathParams:  req.pathParams,
		QueryParams: req.queryParams,
		Headers:     req.headers,
	})

	if err != nil {
		return fmt.Errorf("DeleteMediaTypeId: %w", err)
	}

	return nil
}

type GetAdnParams struct {
	MediaType  string
	Ascending  bool
	PageSize   int32
	PageNumber int32
	Sortby     string
}

// BuildGetAdnRequest extracts parameters and sets for the request to be consumed
func BuildGetAdnRequest(p GetAdnParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	params.queryParams["ascending"] = boolToString(p.Ascending)

	params.queryParams["pageSize"] = numberToString(p.PageSize)

	params.queryParams["pageNumber"] = numberToString(p.PageNumber)

	params.queryParams["sortby"] = p.Sortby

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
GetAdn Get all Customer origins

Get list of Customer Origin

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@return ApiGetAdnRequest
*/
func (c CommonClient) GetAdn(params GetAdnParams) ([]CustomerOrigin, error) {
	req, err := BuildGetAdnRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		return nil, fmt.Errorf("GetAdn: %w", err)
	}

	parsedResponse := make([]CustomerOrigin, 0)

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/{mediaType}",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("GetAdn: %w", err)
	}

	return parsedResponse, nil
}

type GetAdnIdParams struct {
	MediaType string
	Id        float32
}

// BuildGetAdnIdRequest extracts parameters and sets for the request to be consumed
func BuildGetAdnIdRequest(p GetAdnIdParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	params.pathParams["id"] = numberToString(p.Id)

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
GetAdnId Get specific Customer origin by id

Get an individual Customer Origin

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@param id Customer Origin Id
	@return ApiGetAdnIdRequest
*/
func (c CommonClient) GetAdnId(params GetAdnIdParams) (*CustomerOrigin, error) {
	req, err := BuildGetAdnIdRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		return nil, fmt.Errorf("GetAdnId: %w", err)
	}

	parsedResponse := CustomerOrigin{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/{mediaType}/{id}",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("GetAdnId: %w", err)
	}

	return &parsedResponse, nil
}

type GetMediaTypeEdgeFunctionsParams struct {
	MediaType string
}

// BuildGetMediaTypeEdgeFunctionsRequest extracts parameters and sets for the request to be consumed
func BuildGetMediaTypeEdgeFunctionsRequest(p GetMediaTypeEdgeFunctionsParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
GetMediaTypeEdgeFunctions Get edge functions for customer origin

Get Edge Functions list to be used as Customer Origin

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@return ApiGetMediaTypeEdgeFunctionsRequest
*/
func (c CommonClient) GetMediaTypeEdgeFunctions(params GetMediaTypeEdgeFunctionsParams) ([]EdgeFunction, error) {
	req, err := BuildGetMediaTypeEdgeFunctionsRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		return nil, fmt.Errorf("GetMediaTypeEdgeFunctions: %w", err)
	}

	parsedResponse := make([]EdgeFunction, 0)

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/{mediaType}/edge-functions",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("GetMediaTypeEdgeFunctions: %w", err)
	}

	return parsedResponse, nil
}

type GetMediaTypeGroupsIdOriginsParams struct {
	MediaType string
	GroupId   string
}

// BuildGetMediaTypeGroupsIdOriginsRequest extracts parameters and sets for the request to be consumed
func BuildGetMediaTypeGroupsIdOriginsRequest(p GetMediaTypeGroupsIdOriginsParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	params.pathParams["groupId"] = p.GroupId

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
GetMediaTypeGroupsIdOrigins Get all customer origins in a group

This API operation gets all customer origins in a group.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@param groupId Customer Origin Group Id
	@return ApiGetMediaTypeGroupsIdOriginsRequest
*/
func (c CommonClient) GetMediaTypeGroupsIdOrigins(params GetMediaTypeGroupsIdOriginsParams) ([]CustomerOriginFailoverOrder, error) {
	req, err := BuildGetMediaTypeGroupsIdOriginsRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		return nil, fmt.Errorf("GetMediaTypeGroupsIdOrigins: %w", err)
	}

	parsedResponse := make([]CustomerOriginFailoverOrder, 0)

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/{mediaType}/groups/{groupId}/origins",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("GetMediaTypeGroupsIdOrigins: %w", err)
	}

	return parsedResponse, nil
}

type GetMediaTypeGroupsIdStatusParams struct {
	MediaType string
	GroupId   string
}

// BuildGetMediaTypeGroupsIdStatusRequest extracts parameters and sets for the request to be consumed
func BuildGetMediaTypeGroupsIdStatusRequest(p GetMediaTypeGroupsIdStatusParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	params.pathParams["groupId"] = p.GroupId

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
GetMediaTypeGroupsIdStatus Get customer origin group status

This API operation gets a customer origin status.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@param groupId Customer Origin Group Id
	@return ApiGetMediaTypeGroupsIdStatusRequest
*/
func (c CommonClient) GetMediaTypeGroupsIdStatus(params GetMediaTypeGroupsIdStatusParams) (*CustomerOriginStatus, error) {
	req, err := BuildGetMediaTypeGroupsIdStatusRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		return nil, fmt.Errorf("GetMediaTypeGroupsIdStatus: %w", err)
	}

	parsedResponse := CustomerOriginStatus{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/{mediaType}/groups/{groupId}/status",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("GetMediaTypeGroupsIdStatus: %w", err)
	}

	return &parsedResponse, nil
}

type PatchAdnIdParams struct {
	MediaType      string
	Id             float32
	CustomerOrigin CustomerOrigin
}

// BuildPatchAdnIdRequest extracts parameters and sets for the request to be consumed
func BuildPatchAdnIdRequest(p PatchAdnIdParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	params.pathParams["id"] = numberToString(p.Id)

	params.body = p.CustomerOrigin

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
PatchAdnId Update an Customer origin by id

Update an individual Customer Origin

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@param id Customer Origin Id
	@return ApiPatchAdnIdRequest
*/
func (c CommonClient) PatchAdnId(params PatchAdnIdParams) (*CustomerOrigin, error) {
	req, err := BuildPatchAdnIdRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		return nil, fmt.Errorf("PatchAdnId: %w", err)
	}

	parsedResponse := CustomerOrigin{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/{mediaType}/{id}",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("PatchAdnId: %w", err)
	}

	return &parsedResponse, nil
}

type PatchMediaTypeGroupsGroupIdOriginsParams struct {
	MediaType     string
	GroupId       string
	FailoverOrder []FailoverOrder
}

// BuildPatchMediaTypeGroupsGroupIdOriginsRequest extracts parameters and sets for the request to be consumed
func BuildPatchMediaTypeGroupsGroupIdOriginsRequest(p PatchMediaTypeGroupsGroupIdOriginsParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	params.pathParams["groupId"] = p.GroupId

	params.body = p.FailoverOrder

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
PatchMediaTypeGroupsGroupIdOrigins Udpate the failover_order of customer origin in group

Modify the Failover Order in Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@param groupId Customer Origin Group Id
	@return ApiPatchMediaTypeGroupsGroupIdOriginsRequest
*/
func (c CommonClient) PatchMediaTypeGroupsGroupIdOrigins(params PatchMediaTypeGroupsGroupIdOriginsParams) error {
	req, err := BuildPatchMediaTypeGroupsGroupIdOriginsRequest(params)
	if err != nil {
		return err
	}

	method, err := ecclient.ToHTTPMethod("Patch")
	if err != nil {
		return fmt.Errorf("PatchMediaTypeGroupsGroupIdOrigins: %w", err)
	}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:      method,
		Path:        c.baseAPIURL + "/{mediaType}/groups/{groupId}/origins",
		RawBody:     req.body,
		PathParams:  req.pathParams,
		QueryParams: req.queryParams,
		Headers:     req.headers,
	})

	if err != nil {
		return fmt.Errorf("PatchMediaTypeGroupsGroupIdOrigins: %w", err)
	}

	return nil
}

type PatchMediaTypePrimaryIdParams struct {
	MediaType                      string
	Id                             float32
	PatchMediaTypePrimaryIdRequest PatchMediaTypePrimaryIdRequest
}

// BuildPatchMediaTypePrimaryIdRequest extracts parameters and sets for the request to be consumed
func BuildPatchMediaTypePrimaryIdRequest(p PatchMediaTypePrimaryIdParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["mediaType"] = p.MediaType

	params.pathParams["id"] = numberToString(p.Id)

	params.body = p.PatchMediaTypePrimaryIdRequest

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
PatchMediaTypePrimaryId Update a customer origin primary by id

Update a Customer Origin primary by id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param mediaType http-large or adn
	@param id Customer Origin Id
	@return ApiPatchMediaTypePrimaryIdRequest
*/
func (c CommonClient) PatchMediaTypePrimaryId(params PatchMediaTypePrimaryIdParams) (*CustomerOrigin, error) {
	req, err := BuildPatchMediaTypePrimaryIdRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Patch")
	if err != nil {
		return nil, fmt.Errorf("PatchMediaTypePrimaryId: %w", err)
	}

	parsedResponse := CustomerOrigin{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/{mediaType}/primary/{id}",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("PatchMediaTypePrimaryId: %w", err)
	}

	return &parsedResponse, nil
}

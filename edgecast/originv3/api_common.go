// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

// CommonClient is the concrete client implementation for Common
type CommonClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

// NewCommonClient creates a new instance of CommonClient
func NewCommonClient(
	c ecclient.APIClient,
	baseAPIURL string,
) CommonClient {
	return CommonClient{c, baseAPIURL}
}

// CommonClientService defines the operations for Common
type CommonClientService interface {
	AddAdn(
		params AddAdnParams,
	) (*CustomerOrigin, error)

	DeleteMediaTypeGroupsGroupId(
		params DeleteMediaTypeGroupsGroupIdParams,
	) error

	DeleteMediaTypeId(
		params DeleteMediaTypeIdParams,
	) error

	GetAdn(
		params GetAdnParams,
	) ([]CustomerOrigin, error)

	GetAdnId(
		params GetAdnIdParams,
	) (*CustomerOrigin, error)

	GetMediaTypeEdgeFunctions(
		params GetMediaTypeEdgeFunctionsParams,
	) ([]EdgeFunction, error)

	GetMediaTypeGroupsIdOrigins(
		params GetMediaTypeGroupsIdOriginsParams,
	) ([]CustomerOriginFailoverOrder, error)

	GetMediaTypeGroupsIdStatus(
		params GetMediaTypeGroupsIdStatusParams,
	) (*CustomerOriginStatus, error)

	PatchAdnId(
		params PatchAdnIdParams,
	) (*CustomerOrigin, error)

	PatchMediaTypeGroupsGroupIdOrigins(
		params PatchMediaTypeGroupsGroupIdOriginsParams,
	) error
}

// AddAdnParams contains the parameters for AddAdn
type AddAdnParams struct {
	// http-large or adn
	MediaType string

	// The Adn Customer Origin without id
	CustomerOriginRequest CustomerOriginRequest
}

// NewAddAdnParams creates a new instance of AddAdnParams
func NewAddAdnParams() AddAdnParams {
	return AddAdnParams{}
}

// AddAdn - Create new Customer origin
//  Create new Customer Origin
func (c CommonClient) AddAdn(
	params AddAdnParams,
) (*CustomerOrigin, error) {
	req, err := buildAddAdnRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOrigin{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("AddAdn: %w", err)
	}

	return &parsedResponse, nil
}

func buildAddAdnRequest(
	p AddAdnParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		errs = append(errs, fmt.Errorf("AddAdn: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.RawBody = p.CustomerOriginRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// DeleteMediaTypeGroupsGroupIdParams contains the parameters for DeleteMediaTypeGroupsGroupId
type DeleteMediaTypeGroupsGroupIdParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId string
}

// NewDeleteMediaTypeGroupsGroupIdParams creates a new instance of DeleteMediaTypeGroupsGroupIdParams
func NewDeleteMediaTypeGroupsGroupIdParams() DeleteMediaTypeGroupsGroupIdParams {
	return DeleteMediaTypeGroupsGroupIdParams{}
}

// DeleteMediaTypeGroupsGroupId - Delete a customer origin group by id
//  Delete a Customer Origin Group by id
func (c CommonClient) DeleteMediaTypeGroupsGroupId(
	params DeleteMediaTypeGroupsGroupIdParams,
) error {
	req, err := buildDeleteMediaTypeGroupsGroupIdRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("DeleteMediaTypeGroupsGroupId: %w", err)
	}

	return nil
}

func buildDeleteMediaTypeGroupsGroupIdRequest(
	p DeleteMediaTypeGroupsGroupIdParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/groups/{groupId}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Delete")
	if err != nil {
		errs = append(errs, fmt.Errorf("DeleteMediaTypeGroupsGroupId: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = p.GroupId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// DeleteMediaTypeIdParams contains the parameters for DeleteMediaTypeId
type DeleteMediaTypeIdParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Id
	Id float32
}

// NewDeleteMediaTypeIdParams creates a new instance of DeleteMediaTypeIdParams
func NewDeleteMediaTypeIdParams() DeleteMediaTypeIdParams {
	return DeleteMediaTypeIdParams{}
}

// DeleteMediaTypeId - Delete a customer origin by id
//  Delete an individual Customer Origin
func (c CommonClient) DeleteMediaTypeId(
	params DeleteMediaTypeIdParams,
) error {
	req, err := buildDeleteMediaTypeIdRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("DeleteMediaTypeId: %w", err)
	}

	return nil
}

func buildDeleteMediaTypeIdRequest(
	p DeleteMediaTypeIdParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/{id}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Delete")
	if err != nil {
		errs = append(errs, fmt.Errorf("DeleteMediaTypeId: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["id"] = NumberToString(p.Id)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetAdnParams contains the parameters for GetAdn
type GetAdnParams struct {
	// http-large or adn
	MediaType string

	// [false | true] only. Get Error with another value
	Ascending bool

	// In range [1, 1000]
	PageSize int32

	// In range [1, 1000]
	PageNumber int32

	Sortby string
}

// NewGetAdnParams creates a new instance of GetAdnParams
func NewGetAdnParams() GetAdnParams {
	return GetAdnParams{}
}

// GetAdn - Get all Customer origins
//  Get list of Customer Origin
func (c CommonClient) GetAdn(
	params GetAdnParams,
) ([]CustomerOrigin, error) {
	req, err := buildGetAdnRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]CustomerOrigin, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetAdn: %w", err)
	}

	return parsedResponse, nil
}

func buildGetAdnRequest(
	p GetAdnParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetAdn: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.QueryParams["ascending"] = BoolToString(p.Ascending)

	req.QueryParams["pageSize"] = NumberToString(p.PageSize)

	req.QueryParams["pageNumber"] = NumberToString(p.PageNumber)

	req.QueryParams["sortby"] = p.Sortby

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetAdnIdParams contains the parameters for GetAdnId
type GetAdnIdParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Id
	Id float32
}

// NewGetAdnIdParams creates a new instance of GetAdnIdParams
func NewGetAdnIdParams() GetAdnIdParams {
	return GetAdnIdParams{}
}

// GetAdnId - Get specific Customer origin by id
//  Get an individual Customer Origin
func (c CommonClient) GetAdnId(
	params GetAdnIdParams,
) (*CustomerOrigin, error) {
	req, err := buildGetAdnIdRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOrigin{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetAdnId: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetAdnIdRequest(
	p GetAdnIdParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/{id}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetAdnId: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["id"] = NumberToString(p.Id)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetMediaTypeEdgeFunctionsParams contains the parameters for GetMediaTypeEdgeFunctions
type GetMediaTypeEdgeFunctionsParams struct {
	// http-large or adn
	MediaType string
}

// NewGetMediaTypeEdgeFunctionsParams creates a new instance of GetMediaTypeEdgeFunctionsParams
func NewGetMediaTypeEdgeFunctionsParams() GetMediaTypeEdgeFunctionsParams {
	return GetMediaTypeEdgeFunctionsParams{}
}

// GetMediaTypeEdgeFunctions - Get edge functions for customer origin
//  Get Edge Functions list to be used as Customer Origin
func (c CommonClient) GetMediaTypeEdgeFunctions(
	params GetMediaTypeEdgeFunctionsParams,
) ([]EdgeFunction, error) {
	req, err := buildGetMediaTypeEdgeFunctionsRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]EdgeFunction, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetMediaTypeEdgeFunctions: %w", err)
	}

	return parsedResponse, nil
}

func buildGetMediaTypeEdgeFunctionsRequest(
	p GetMediaTypeEdgeFunctionsParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/edge-functions"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetMediaTypeEdgeFunctions: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetMediaTypeGroupsIdOriginsParams contains the parameters for GetMediaTypeGroupsIdOrigins
type GetMediaTypeGroupsIdOriginsParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId string
}

// NewGetMediaTypeGroupsIdOriginsParams creates a new instance of GetMediaTypeGroupsIdOriginsParams
func NewGetMediaTypeGroupsIdOriginsParams() GetMediaTypeGroupsIdOriginsParams {
	return GetMediaTypeGroupsIdOriginsParams{}
}

// GetMediaTypeGroupsIdOrigins - Get all customer origins in a group
//  This API operation gets all customer origins in a group.
func (c CommonClient) GetMediaTypeGroupsIdOrigins(
	params GetMediaTypeGroupsIdOriginsParams,
) ([]CustomerOriginFailoverOrder, error) {
	req, err := buildGetMediaTypeGroupsIdOriginsRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]CustomerOriginFailoverOrder, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetMediaTypeGroupsIdOrigins: %w", err)
	}

	return parsedResponse, nil
}

func buildGetMediaTypeGroupsIdOriginsRequest(
	p GetMediaTypeGroupsIdOriginsParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/groups/{groupId}/origins"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetMediaTypeGroupsIdOrigins: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = p.GroupId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetMediaTypeGroupsIdStatusParams contains the parameters for GetMediaTypeGroupsIdStatus
type GetMediaTypeGroupsIdStatusParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId string
}

// NewGetMediaTypeGroupsIdStatusParams creates a new instance of GetMediaTypeGroupsIdStatusParams
func NewGetMediaTypeGroupsIdStatusParams() GetMediaTypeGroupsIdStatusParams {
	return GetMediaTypeGroupsIdStatusParams{}
}

// GetMediaTypeGroupsIdStatus - Get customer origin group status
//  This API operation gets a customer origin status.
func (c CommonClient) GetMediaTypeGroupsIdStatus(
	params GetMediaTypeGroupsIdStatusParams,
) (*CustomerOriginStatus, error) {
	req, err := buildGetMediaTypeGroupsIdStatusRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginStatus{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetMediaTypeGroupsIdStatus: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetMediaTypeGroupsIdStatusRequest(
	p GetMediaTypeGroupsIdStatusParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/groups/{groupId}/status"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetMediaTypeGroupsIdStatus: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = p.GroupId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// PatchAdnIdParams contains the parameters for PatchAdnId
type PatchAdnIdParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Id
	Id int32

	// The modified Customer Origin
	CustomerOriginRequest CustomerOriginRequest
}

// NewPatchAdnIdParams creates a new instance of PatchAdnIdParams
func NewPatchAdnIdParams() PatchAdnIdParams {
	return PatchAdnIdParams{}
}

// PatchAdnId - Update an Customer origin by id
//  Update an individual Customer Origin
func (c CommonClient) PatchAdnId(
	params PatchAdnIdParams,
) (*CustomerOrigin, error) {
	req, err := buildPatchAdnIdRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOrigin{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("PatchAdnId: %w", err)
	}

	return &parsedResponse, nil
}

func buildPatchAdnIdRequest(
	p PatchAdnIdParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/{id}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		errs = append(errs, fmt.Errorf("PatchAdnId: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["id"] = NumberToString(p.Id)

	req.RawBody = p.CustomerOriginRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// PatchMediaTypeGroupsGroupIdOriginsParams contains the parameters for PatchMediaTypeGroupsGroupIdOrigins
type PatchMediaTypeGroupsGroupIdOriginsParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId string

	FailoverOrder []FailoverOrder
}

// NewPatchMediaTypeGroupsGroupIdOriginsParams creates a new instance of PatchMediaTypeGroupsGroupIdOriginsParams
func NewPatchMediaTypeGroupsGroupIdOriginsParams() PatchMediaTypeGroupsGroupIdOriginsParams {
	return PatchMediaTypeGroupsGroupIdOriginsParams{}
}

// PatchMediaTypeGroupsGroupIdOrigins - Udpate the failover_order of customer origin in group
//  Modify the Failover Order in Group
func (c CommonClient) PatchMediaTypeGroupsGroupIdOrigins(
	params PatchMediaTypeGroupsGroupIdOriginsParams,
) error {
	req, err := buildPatchMediaTypeGroupsGroupIdOriginsRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("PatchMediaTypeGroupsGroupIdOrigins: %w", err)
	}

	return nil
}

func buildPatchMediaTypeGroupsGroupIdOriginsRequest(
	p PatchMediaTypeGroupsGroupIdOriginsParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/{mediaType}/groups/{groupId}/origins"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Patch")
	if err != nil {
		errs = append(errs, fmt.Errorf("PatchMediaTypeGroupsGroupIdOrigins: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = p.GroupId

	req.RawBody = p.FailoverOrder

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

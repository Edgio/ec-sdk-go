// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"
	"path"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

// CommonClient is the concrete client implementation for Common
type CommonClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

// NewCommonClient creates a new instance of CommonClient
func NewCommonClient(
	c ecclient.APIClient,
	baseAPIURL string,
) CommonClient {
	return CommonClient{c, baseAPIURL}
}

// CommonClientService defines the operations for Common
type CommonClientService interface {
	AddOriginEntry(
		params AddOriginEntryParams,
	) (*CustomerOrigin, error)

	DeleteCustomerOriginGroup(
		params DeleteCustomerOriginGroupParams,
	) error

	DeleteOriginEntry(
		params DeleteOriginEntryParams,
	) error

	GetAllFunctions(
		params GetAllFunctionsParams,
	) ([]EdgeFunction, error)

	GetAllOriginEntries(
		params GetAllOriginEntriesParams,
	) ([]CustomerOrigin, error)

	GetCustomerOriginGroupStatus(
		params GetCustomerOriginGroupStatusParams,
	) (*CustomerOriginStatus, error)

	GetOrigin(
		params GetOriginParams,
	) (*CustomerOrigin, error)

	GetOriginEntriesByCustomerOriginGroup(
		params GetOriginEntriesByCustomerOriginGroupParams,
	) ([]CustomerOriginFailoverOrder, error)

	UpdateFailoverOrder(
		params UpdateFailoverOrderParams,
	) error

	UpdateOriginEntry(
		params UpdateOriginEntryParams,
	) (*CustomerOrigin, error)
}

// AddOriginEntryParams contains the parameters for AddOriginEntry
type AddOriginEntryParams struct {
	// http-large or adn
	MediaType string

	// The Adn Customer Origin without id
	CustomerOriginRequest CustomerOriginRequest
}

// NewAddOriginEntryParams creates a new instance of AddOriginEntryParams
func NewAddOriginEntryParams() AddOriginEntryParams {
	return AddOriginEntryParams{}
}

// AddOriginEntry - Create new Customer origin
//
//	Create new Customer Origin
func (c CommonClient) AddOriginEntry(
	params AddOriginEntryParams,
) (*CustomerOrigin, error) {
	req, err := buildAddOriginEntryRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOrigin{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("AddOriginEntry: %w", err)
	}

	return &parsedResponse, nil
}

func buildAddOriginEntryRequest(
	p AddOriginEntryParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/{mediaType}")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		errs = append(errs, fmt.Errorf("AddOriginEntry: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.RawBody = p.CustomerOriginRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// DeleteCustomerOriginGroupParams contains the parameters for DeleteCustomerOriginGroup
type DeleteCustomerOriginGroupParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId string
}

// NewDeleteCustomerOriginGroupParams creates a new instance of DeleteCustomerOriginGroupParams
func NewDeleteCustomerOriginGroupParams() DeleteCustomerOriginGroupParams {
	return DeleteCustomerOriginGroupParams{}
}

// DeleteCustomerOriginGroup - Delete a customer origin group by id
//
//	Delete a Customer Origin Group by id
func (c CommonClient) DeleteCustomerOriginGroup(
	params DeleteCustomerOriginGroupParams,
) error {
	req, err := buildDeleteCustomerOriginGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("DeleteCustomerOriginGroup: %w", err)
	}

	return nil
}

func buildDeleteCustomerOriginGroupRequest(
	p DeleteCustomerOriginGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/{mediaType}/groups/{groupId}")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Delete")
	if err != nil {
		errs = append(errs, fmt.Errorf("DeleteCustomerOriginGroup: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = p.GroupId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// DeleteOriginEntryParams contains the parameters for DeleteOriginEntry
type DeleteOriginEntryParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Id
	Id float32
}

// NewDeleteOriginEntryParams creates a new instance of DeleteOriginEntryParams
func NewDeleteOriginEntryParams() DeleteOriginEntryParams {
	return DeleteOriginEntryParams{}
}

// DeleteOriginEntry - Delete a customer origin by id
//
//	Delete an individual Customer Origin
func (c CommonClient) DeleteOriginEntry(
	params DeleteOriginEntryParams,
) error {
	req, err := buildDeleteOriginEntryRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("DeleteOriginEntry: %w", err)
	}

	return nil
}

func buildDeleteOriginEntryRequest(
	p DeleteOriginEntryParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/{mediaType}/{id}")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Delete")
	if err != nil {
		errs = append(errs, fmt.Errorf("DeleteOriginEntry: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["id"] = NumberToString(p.Id)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetAllFunctionsParams contains the parameters for GetAllFunctions
type GetAllFunctionsParams struct {
	// http-large or adn
	MediaType string
}

// NewGetAllFunctionsParams creates a new instance of GetAllFunctionsParams
func NewGetAllFunctionsParams() GetAllFunctionsParams {
	return GetAllFunctionsParams{}
}

// GetAllFunctions - Get edge functions for customer origin
//
//	Get Edge Functions list to be used as Customer Origin
func (c CommonClient) GetAllFunctions(
	params GetAllFunctionsParams,
) ([]EdgeFunction, error) {
	req, err := buildGetAllFunctionsRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]EdgeFunction, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetAllFunctions: %w", err)
	}

	return parsedResponse, nil
}

func buildGetAllFunctionsRequest(
	p GetAllFunctionsParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/{mediaType}/edge-functions")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetAllFunctions: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetAllOriginEntriesParams contains the parameters for GetAllOriginEntries
type GetAllOriginEntriesParams struct {
	// http-large or adn
	MediaType string

	// [false | true] only. Get Error with another value
	Ascending bool

	// In range [1, 1000]
	PageSize int32

	// In range [1, 1000]
	PageNumber int32

	Sortby string
}

// NewGetAllOriginEntriesParams creates a new instance of GetAllOriginEntriesParams
func NewGetAllOriginEntriesParams() GetAllOriginEntriesParams {
	return GetAllOriginEntriesParams{}
}

// GetAllOriginEntries - Get all Customer origins
//
//	Get list of Customer Origin
func (c CommonClient) GetAllOriginEntries(
	params GetAllOriginEntriesParams,
) ([]CustomerOrigin, error) {
	req, err := buildGetAllOriginEntriesRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]CustomerOrigin, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetAllOriginEntries: %w", err)
	}

	return parsedResponse, nil
}

func buildGetAllOriginEntriesRequest(
	p GetAllOriginEntriesParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/{mediaType}")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetAllOriginEntries: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.QueryParams["ascending"] = BoolToString(p.Ascending)

	req.QueryParams["pageSize"] = NumberToString(p.PageSize)

	req.QueryParams["pageNumber"] = NumberToString(p.PageNumber)

	req.QueryParams["sortby"] = p.Sortby

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetCustomerOriginGroupStatusParams contains the parameters for GetCustomerOriginGroupStatus
type GetCustomerOriginGroupStatusParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId string
}

// NewGetCustomerOriginGroupStatusParams creates a new instance of GetCustomerOriginGroupStatusParams
func NewGetCustomerOriginGroupStatusParams() GetCustomerOriginGroupStatusParams {
	return GetCustomerOriginGroupStatusParams{}
}

// GetCustomerOriginGroupStatus - Get customer origin group status
//
//	This API operation gets a customer origin status.
func (c CommonClient) GetCustomerOriginGroupStatus(
	params GetCustomerOriginGroupStatusParams,
) (*CustomerOriginStatus, error) {
	req, err := buildGetCustomerOriginGroupStatusRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginStatus{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetCustomerOriginGroupStatus: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetCustomerOriginGroupStatusRequest(
	p GetCustomerOriginGroupStatusParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/{mediaType}/groups/{groupId}/status")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetCustomerOriginGroupStatus: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = p.GroupId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetOriginParams contains the parameters for GetOrigin
type GetOriginParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Id
	Id float32
}

// NewGetOriginParams creates a new instance of GetOriginParams
func NewGetOriginParams() GetOriginParams {
	return GetOriginParams{}
}

// GetOrigin - Get specific Customer origin by id
//
//	Get an individual Customer Origin
func (c CommonClient) GetOrigin(
	params GetOriginParams,
) (*CustomerOrigin, error) {
	req, err := buildGetOriginRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOrigin{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetOrigin: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetOriginRequest(
	p GetOriginParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/{mediaType}/{id}")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetOrigin: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["id"] = NumberToString(p.Id)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetOriginEntriesByCustomerOriginGroupParams contains the parameters for GetOriginEntriesByCustomerOriginGroup
type GetOriginEntriesByCustomerOriginGroupParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId string
}

// NewGetOriginEntriesByCustomerOriginGroupParams creates a new instance of GetOriginEntriesByCustomerOriginGroupParams
func NewGetOriginEntriesByCustomerOriginGroupParams() GetOriginEntriesByCustomerOriginGroupParams {
	return GetOriginEntriesByCustomerOriginGroupParams{}
}

// GetOriginEntriesByCustomerOriginGroup - Get all customer origins in a group
//
//	This API operation gets all customer origins in a group.
func (c CommonClient) GetOriginEntriesByCustomerOriginGroup(
	params GetOriginEntriesByCustomerOriginGroupParams,
) ([]CustomerOriginFailoverOrder, error) {
	req, err := buildGetOriginEntriesByCustomerOriginGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]CustomerOriginFailoverOrder, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetOriginEntriesByCustomerOriginGroup: %w", err)
	}

	return parsedResponse, nil
}

func buildGetOriginEntriesByCustomerOriginGroupRequest(
	p GetOriginEntriesByCustomerOriginGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/{mediaType}/groups/{groupId}/origins")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetOriginEntriesByCustomerOriginGroup: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = p.GroupId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// UpdateFailoverOrderParams contains the parameters for UpdateFailoverOrder
type UpdateFailoverOrderParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Group Id
	GroupId string

	FailoverOrder []FailoverOrder
}

// NewUpdateFailoverOrderParams creates a new instance of UpdateFailoverOrderParams
func NewUpdateFailoverOrderParams() UpdateFailoverOrderParams {
	return UpdateFailoverOrderParams{}
}

// UpdateFailoverOrder - Udpate the failover_order of customer origin in group
//
//	Modify the Failover Order in Group
func (c CommonClient) UpdateFailoverOrder(
	params UpdateFailoverOrderParams,
) error {
	req, err := buildUpdateFailoverOrderRequest(params, c.baseAPIURL)
	if err != nil {
		return err
	}

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return fmt.Errorf("UpdateFailoverOrder: %w", err)
	}

	return nil
}

func buildUpdateFailoverOrderRequest(
	p UpdateFailoverOrderParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/{mediaType}/groups/{groupId}/origins")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Patch")
	if err != nil {
		errs = append(errs, fmt.Errorf("UpdateFailoverOrder: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["groupId"] = p.GroupId

	req.RawBody = p.FailoverOrder

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// UpdateOriginEntryParams contains the parameters for UpdateOriginEntry
type UpdateOriginEntryParams struct {
	// http-large or adn
	MediaType string

	// Customer Origin Id
	Id float32

	// The modified Customer Origin
	CustomerOriginRequest CustomerOriginRequest
}

// NewUpdateOriginEntryParams creates a new instance of UpdateOriginEntryParams
func NewUpdateOriginEntryParams() UpdateOriginEntryParams {
	return UpdateOriginEntryParams{}
}

// UpdateOriginEntry - Update an Customer origin by id
//
//	Update an individual Customer Origin
func (c CommonClient) UpdateOriginEntry(
	params UpdateOriginEntryParams,
) (*CustomerOrigin, error) {
	req, err := buildUpdateOriginEntryRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOrigin{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("UpdateOriginEntry: %w", err)
	}

	return &parsedResponse, nil
}

func buildUpdateOriginEntryRequest(
	p UpdateOriginEntryParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/{mediaType}/{id}")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		errs = append(errs, fmt.Errorf("UpdateOriginEntry: %w", err))
	}

	req.Method = method

	req.PathParams["mediaType"] = p.MediaType

	req.PathParams["id"] = NumberToString(p.Id)

	req.RawBody = p.CustomerOriginRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

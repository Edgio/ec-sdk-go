// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast"
	"github.com/EdgeCast/ec-sdk-go/edgecast/eclog"
	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecauth"
	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
)

// Service manages
// communication with the Customer Origins API v3 API v0.5.0
type Service struct {
	client ecclient.APIClient

	clientConfig ecclient.ClientConfig

	Logger eclog.Logger

	AdnOnly AdnOnlyClientService

	Common CommonClientService

	HttpLargeOnly HttpLargeOnlyClientService
}

// New creates a new Service
func New(config edgecast.SDKConfig) (*Service, error) {
	var auth ecauth.AuthorizationProvider

	auth, err := ecauth.NewIDSAuthorizationProvider(
		config.BaseIDSURL,
		ecauth.OAuth2Credentials(config.IDSCredentials))
	if err != nil {
		// Fall back to token authentication
		auth, err = ecauth.NewTokenAuthorizationProvider(config.APIToken)
		if err != nil {
			return nil,
				fmt.Errorf("error initializing originv3 Service: %w", err)
		}
	}

	c := ecclient.New(ecclient.ClientConfig{
		BaseAPIURL:   config.BaseAPIURL,
		UserAgent:    config.UserAgent,
		Logger:       config.Logger,
		AuthProvider: auth,
	})

	return &Service{
		client:        c,
		Logger:        config.Logger,
		AdnOnly:       NewAdnOnlyClient(c, config.BaseAPIURL.String()),
		Common:        NewCommonClient(c, config.BaseAPIURL.String()),
		HttpLargeOnly: NewHttpLargeOnlyClient(c, config.BaseAPIURL.String()),
	}, nil
}

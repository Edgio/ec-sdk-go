// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

type AdnOnlyClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

func NewAdnOnlyClientService(
	c ecclient.APIClient,
	baseAPIURL string,
) AdnOnlyClientService {
	return AdnOnlyClient{c, baseAPIURL}
}

type AdnOnlyClientService interface {
	GetAdnGroups(params GetAdnGroupsParams) ([]CustomerOriginGroupADN, error)

	GetAdnGroupsGroupId(params GetAdnGroupsGroupIdParams) (*CustomerOriginGroupADN, error)

	PostAdnGroups(params PostAdnGroupsParams) (*CustomerOriginGroupADN, error)

	PutAdnGroupsGroupId(params PutAdnGroupsGroupIdParams) (*CustomerOriginGroupADN, error)
}

type GetAdnGroupsParams struct{}

// BuildGetAdnGroupsRequest extracts parameters and sets for the request to be consumed
func BuildGetAdnGroupsRequest(p GetAdnGroupsParams) (*request, error) {
	var res []error
	params := newRequest()

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
GetAdnGroups Get Adn customer origins groups

Get list of Adn Customer Origin Groups

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAdnGroupsRequest
*/
func (c AdnOnlyClient) GetAdnGroups(params GetAdnGroupsParams) ([]CustomerOriginGroupADN, error) {
	req, err := BuildGetAdnGroupsRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		return nil, fmt.Errorf("GetAdnGroups: %w", err)
	}

	parsedResponse := make([]CustomerOriginGroupADN, 0)

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/adn/groups",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("GetAdnGroups: %w", err)
	}

	return parsedResponse, nil
}

type GetAdnGroupsGroupIdParams struct {
	GroupId string
}

// BuildGetAdnGroupsGroupIdRequest extracts parameters and sets for the request to be consumed
func BuildGetAdnGroupsGroupIdRequest(p GetAdnGroupsGroupIdParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["groupId"] = p.GroupId

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
GetAdnGroupsGroupId Get specific Adn customer origin group by id

Get an individual Adn Customer Origin Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId Customer Origin Group Id
	@return ApiGetAdnGroupsGroupIdRequest
*/
func (c AdnOnlyClient) GetAdnGroupsGroupId(params GetAdnGroupsGroupIdParams) (*CustomerOriginGroupADN, error) {
	req, err := BuildGetAdnGroupsGroupIdRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		return nil, fmt.Errorf("GetAdnGroupsGroupId: %w", err)
	}

	parsedResponse := CustomerOriginGroupADN{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/adn/groups/{groupId}",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("GetAdnGroupsGroupId: %w", err)
	}

	return &parsedResponse, nil
}

type PostAdnGroupsParams struct {
	CustomerOriginGroupADN CustomerOriginGroupADN
}

// BuildPostAdnGroupsRequest extracts parameters and sets for the request to be consumed
func BuildPostAdnGroupsRequest(p PostAdnGroupsParams) (*request, error) {
	var res []error
	params := newRequest()

	params.body = p.CustomerOriginGroupADN

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
PostAdnGroups Create new Adn customer origin group

Create Adn new Customer Origin Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostAdnGroupsRequest
*/
func (c AdnOnlyClient) PostAdnGroups(params PostAdnGroupsParams) (*CustomerOriginGroupADN, error) {
	req, err := BuildPostAdnGroupsRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		return nil, fmt.Errorf("PostAdnGroups: %w", err)
	}

	parsedResponse := CustomerOriginGroupADN{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/adn/groups",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("PostAdnGroups: %w", err)
	}

	return &parsedResponse, nil
}

type PutAdnGroupsGroupIdParams struct {
	GroupId                string
	CustomerOriginGroupADN CustomerOriginGroupADN
}

// BuildPutAdnGroupsGroupIdRequest extracts parameters and sets for the request to be consumed
func BuildPutAdnGroupsGroupIdRequest(p PutAdnGroupsGroupIdParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["groupId"] = p.GroupId

	params.body = p.CustomerOriginGroupADN

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
PutAdnGroupsGroupId Update Adn customer origin group by id

Update an individual Adn Customer Origin Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId Customer Origin Group Id
	@return ApiPutAdnGroupsGroupIdRequest
*/
func (c AdnOnlyClient) PutAdnGroupsGroupId(params PutAdnGroupsGroupIdParams) (*CustomerOriginGroupADN, error) {
	req, err := BuildPutAdnGroupsGroupIdRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		return nil, fmt.Errorf("PutAdnGroupsGroupId: %w", err)
	}

	parsedResponse := CustomerOriginGroupADN{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/adn/groups/{groupId}",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("PutAdnGroupsGroupId: %w", err)
	}

	return &parsedResponse, nil
}

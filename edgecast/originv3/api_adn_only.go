// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"
	"path"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

// AdnOnlyClient is the concrete client implementation for AdnOnly
type AdnOnlyClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

// NewAdnOnlyClient creates a new instance of AdnOnlyClient
func NewAdnOnlyClient(
	c ecclient.APIClient,
	baseAPIURL string,
) AdnOnlyClient {
	return AdnOnlyClient{c, baseAPIURL}
}

// AdnOnlyClientService defines the operations for AdnOnly
type AdnOnlyClientService interface {
	AddAdnCustomerOriginGroup(
		params AddAdnCustomerOriginGroupParams,
	) (*CustomerOriginGroupADN, error)

	GetAdnCustomerOriginGroup(
		params GetAdnCustomerOriginGroupParams,
	) (*CustomerOriginGroupADN, error)

	GetAllAdnCustomerOriginGroups() ([]CustomerOriginGroupADN, error)

	UpdateAdnCustomerOriginGroup(
		params UpdateAdnCustomerOriginGroupParams,
	) (*CustomerOriginGroupADN, error)
}

// AddAdnCustomerOriginGroupParams contains the parameters for AddAdnCustomerOriginGroup
type AddAdnCustomerOriginGroupParams struct {
	CustomerOriginGroupADNRequestCreate CustomerOriginGroupADNRequestCreate
}

// NewAddAdnCustomerOriginGroupParams creates a new instance of AddAdnCustomerOriginGroupParams
func NewAddAdnCustomerOriginGroupParams() AddAdnCustomerOriginGroupParams {
	return AddAdnCustomerOriginGroupParams{}
}

// AddAdnCustomerOriginGroup - Create new Adn customer origin group
//
//	Create Adn new Customer Origin Group
func (c AdnOnlyClient) AddAdnCustomerOriginGroup(
	params AddAdnCustomerOriginGroupParams,
) (*CustomerOriginGroupADN, error) {
	req, err := buildAddAdnCustomerOriginGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupADN{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("AddAdnCustomerOriginGroup: %w", err)
	}

	return &parsedResponse, nil
}

func buildAddAdnCustomerOriginGroupRequest(
	p AddAdnCustomerOriginGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/adn/groups")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		errs = append(errs, fmt.Errorf("AddAdnCustomerOriginGroup: %w", err))
	}

	req.Method = method
	req.RawBody = p.CustomerOriginGroupADNRequestCreate

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetAdnCustomerOriginGroupParams contains the parameters for GetAdnCustomerOriginGroup
type GetAdnCustomerOriginGroupParams struct {
	// Customer Origin Group Id
	GroupId string
}

// NewGetAdnCustomerOriginGroupParams creates a new instance of GetAdnCustomerOriginGroupParams
func NewGetAdnCustomerOriginGroupParams() GetAdnCustomerOriginGroupParams {
	return GetAdnCustomerOriginGroupParams{}
}

// GetAdnCustomerOriginGroup - Get specific Adn customer origin group by id
//
//	Get an individual Adn Customer Origin Group
func (c AdnOnlyClient) GetAdnCustomerOriginGroup(
	params GetAdnCustomerOriginGroupParams,
) (*CustomerOriginGroupADN, error) {
	req, err := buildGetAdnCustomerOriginGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupADN{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetAdnCustomerOriginGroup: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetAdnCustomerOriginGroupRequest(
	p GetAdnCustomerOriginGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/adn/groups/{groupId}")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetAdnCustomerOriginGroup: %w", err))
	}

	req.Method = method

	req.PathParams["groupId"] = p.GroupId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetAllAdnCustomerOriginGroups - Get Adn customer origins groups
//
//	Get list of Adn Customer Origin Groups
func (c AdnOnlyClient) GetAllAdnCustomerOriginGroups() ([]CustomerOriginGroupADN, error) {
	req, err := buildGetAllAdnCustomerOriginGroupsRequest(c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]CustomerOriginGroupADN, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetAllAdnCustomerOriginGroups: %w", err)
	}

	return parsedResponse, nil
}

func buildGetAllAdnCustomerOriginGroupsRequest(
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/adn/groups")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetAllAdnCustomerOriginGroups: %w", err))
	}

	req.Method = method

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// UpdateAdnCustomerOriginGroupParams contains the parameters for UpdateAdnCustomerOriginGroup
type UpdateAdnCustomerOriginGroupParams struct {
	// Customer Origin Group Id
	GroupId string

	CustomerOriginGroupADNRequest CustomerOriginGroupADNRequest
}

// NewUpdateAdnCustomerOriginGroupParams creates a new instance of UpdateAdnCustomerOriginGroupParams
func NewUpdateAdnCustomerOriginGroupParams() UpdateAdnCustomerOriginGroupParams {
	return UpdateAdnCustomerOriginGroupParams{}
}

// UpdateAdnCustomerOriginGroup - Update Adn customer origin group by id
//
//	Update an individual Adn Customer Origin Group
func (c AdnOnlyClient) UpdateAdnCustomerOriginGroup(
	params UpdateAdnCustomerOriginGroupParams,
) (*CustomerOriginGroupADN, error) {
	req, err := buildUpdateAdnCustomerOriginGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupADN{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("UpdateAdnCustomerOriginGroup: %w", err)
	}

	return &parsedResponse, nil
}

func buildUpdateAdnCustomerOriginGroupRequest(
	p UpdateAdnCustomerOriginGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = path.Join(baseAPIURL, "/adn/groups/{groupId}")
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		errs = append(errs, fmt.Errorf("UpdateAdnCustomerOriginGroup: %w", err))
	}

	req.Method = method

	req.PathParams["groupId"] = p.GroupId

	req.RawBody = p.CustomerOriginGroupADNRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

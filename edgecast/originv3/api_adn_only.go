// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

// AdnOnlyClient is the concrete client implementation for AdnOnly
type AdnOnlyClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

// NewAdnOnlyClient creates a new instance of AdnOnlyClient
func NewAdnOnlyClient(
	c ecclient.APIClient,
	baseAPIURL string,
) AdnOnlyClient {
	return AdnOnlyClient{c, baseAPIURL}
}

// AdnOnlyClientService defines the operations for AdnOnly
type AdnOnlyClientService interface {
	CreateAdnGroup(
		params CreateAdnGroupParams,
	) (*CustomerOriginGroupADN, error)

	GetAdnGroup(
		params GetAdnGroupParams,
	) (*CustomerOriginGroupADN, error)

	GetAdnGroups() ([]CustomerOriginGroupADN, error)

	UpdateAdnGroup(
		params UpdateAdnGroupParams,
	) (*CustomerOriginGroupADN, error)
}

// CreateAdnGroupParams contains the parameters for CreateAdnGroup
type CreateAdnGroupParams struct {
	CustomerOriginGroupADNRequestCreate CustomerOriginGroupADNRequestCreate
}

// NewCreateAdnGroupParams creates a new instance of CreateAdnGroupParams
func NewCreateAdnGroupParams() CreateAdnGroupParams {
	return CreateAdnGroupParams{}
}

// CreateAdnGroup - Create new Adn customer origin group
//
//	Create Adn new Customer Origin Group
func (c AdnOnlyClient) CreateAdnGroup(
	params CreateAdnGroupParams,
) (*CustomerOriginGroupADN, error) {
	req, err := buildCreateAdnGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupADN{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("CreateAdnGroup: %w", err)
	}

	return &parsedResponse, nil
}

func buildCreateAdnGroupRequest(
	p CreateAdnGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/adn/groups"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		errs = append(errs, fmt.Errorf("CreateAdnGroup: %w", err))
	}

	req.Method = method
	req.RawBody = p.CustomerOriginGroupADNRequestCreate

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetAdnGroupParams contains the parameters for GetAdnGroup
type GetAdnGroupParams struct {
	// Customer Origin Group Id
	GroupId int32
}

// NewGetAdnGroupParams creates a new instance of GetAdnGroupParams
func NewGetAdnGroupParams() GetAdnGroupParams {
	return GetAdnGroupParams{}
}

// GetAdnGroup - Get specific Adn customer origin group by id
//
//	Get an individual Adn Customer Origin Group
func (c AdnOnlyClient) GetAdnGroup(
	params GetAdnGroupParams,
) (*CustomerOriginGroupADN, error) {
	req, err := buildGetAdnGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupADN{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetAdnGroup: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetAdnGroupRequest(
	p GetAdnGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/adn/groups/{groupId}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetAdnGroup: %w", err))
	}

	req.Method = method

	req.PathParams["groupId"] = NumberToString(p.GroupId)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetAdnGroups - Get Adn customer origins groups
//
//	Get list of Adn Customer Origin Groups
func (c AdnOnlyClient) GetAdnGroups() ([]CustomerOriginGroupADN, error) {
	req, err := buildGetAdnGroupsRequest(c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]CustomerOriginGroupADN, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetAdnGroups: %w", err)
	}

	return parsedResponse, nil
}

func buildGetAdnGroupsRequest(
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/adn/groups"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetAdnGroups: %w", err))
	}

	req.Method = method

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// UpdateAdnGroupParams contains the parameters for UpdateAdnGroup
type UpdateAdnGroupParams struct {
	// Customer Origin Group Id
	GroupId int32

	CustomerOriginGroupADNRequest CustomerOriginGroupADNRequest
}

// NewUpdateAdnGroupParams creates a new instance of UpdateAdnGroupParams
func NewUpdateAdnGroupParams() UpdateAdnGroupParams {
	return UpdateAdnGroupParams{}
}

// UpdateAdnGroup - Update Adn customer origin group by id
//
//	Update an individual Adn Customer Origin Group
func (c AdnOnlyClient) UpdateAdnGroup(
	params UpdateAdnGroupParams,
) (*CustomerOriginGroupADN, error) {
	req, err := buildUpdateAdnGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupADN{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("UpdateAdnGroup: %w", err)
	}

	return &parsedResponse, nil
}

func buildUpdateAdnGroupRequest(
	p UpdateAdnGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/adn/groups/{groupId}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		errs = append(errs, fmt.Errorf("UpdateAdnGroup: %w", err))
	}

	req.Method = method

	req.PathParams["groupId"] = NumberToString(p.GroupId)

	req.RawBody = p.CustomerOriginGroupADNRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

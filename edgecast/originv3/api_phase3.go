// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

// Phase3Client is the concrete client implementation for Phase3
type Phase3Client struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

// NewPhase3Client creates a new instance of Phase3Client
func NewPhase3Client(
	c ecclient.APIClient,
	baseAPIURL string,
) Phase3Client {
	return Phase3Client{c, baseAPIURL}
}

// Phase3ClientService defines the operations for Phase3
type Phase3ClientService interface {
	GetNetworkTypes() ([]NetworkType, error)

	GetProtocolTypes() ([]ProtocolType, error)
}

// GetNetworkTypes - Get Network Types
//
//	Get Origin Network Regions
func (c Phase3Client) GetNetworkTypes() ([]NetworkType, error) {
	req, err := buildGetNetworkTypesRequest(c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]NetworkType, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetNetworkTypes: %w", err)
	}

	return parsedResponse, nil
}

func buildGetNetworkTypesRequest(
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/network-types"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetNetworkTypes: %w", err))
	}

	req.Method = method

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetProtocolTypes - Get Protocol Types
//
//	Get Protocol Types
func (c Phase3Client) GetProtocolTypes() ([]ProtocolType, error) {
	req, err := buildGetProtocolTypesRequest(c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]ProtocolType, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetProtocolTypes: %w", err)
	}

	return parsedResponse, nil
}

func buildGetProtocolTypesRequest(
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/protocol-types"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetProtocolTypes: %w", err))
	}

	req.Method = method

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"encoding/json"
)

// TlsSettings
type TlsSettings struct {
	SniHostname          NullableString `json:"sni_hostname,omitempty"`
	AllowSelfSigned      *bool          `json:"allow_self_signed,omitempty"`
	PublicKeysToVerify   []string       `json:"public_keys_to_verify,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TlsSettings TlsSettings

// NewTlsSettings instantiates a new TlsSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTlsSettings() *TlsSettings {
	this := TlsSettings{}
	return &this
}

// NewTlsSettingsWithDefaults instantiates a new TlsSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTlsSettingsWithDefaults() *TlsSettings {
	this := TlsSettings{}
	return &this
}

// GetSniHostname returns the SniHostname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TlsSettings) GetSniHostname() string {
	if o == nil || o.SniHostname.Get() == nil {
		var ret string
		return ret
	}
	return *o.SniHostname.Get()
}

// GetSniHostnameOk returns a tuple with the SniHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TlsSettings) GetSniHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SniHostname.Get(), o.SniHostname.IsSet()
}

// HasSniHostname returns a boolean if a field has been set.
func (o *TlsSettings) HasSniHostname() bool {
	if o != nil && o.SniHostname.IsSet() {
		return true
	}

	return false
}

// SetSniHostname gets a reference to the given NullableString and assigns it to the SniHostname field.
func (o *TlsSettings) SetSniHostname(v string) {
	o.SniHostname.Set(&v)
}

// SetSniHostnameNil sets the value for SniHostname to be an explicit nil
func (o *TlsSettings) SetSniHostnameNil() {
	o.SniHostname.Set(nil)
}

// UnsetSniHostname ensures that no value is present for SniHostname, not even an explicit nil
func (o *TlsSettings) UnsetSniHostname() {
	o.SniHostname.Unset()
}

// GetAllowSelfSigned returns the AllowSelfSigned field value if set, zero value otherwise.
func (o *TlsSettings) GetAllowSelfSigned() bool {
	if o == nil || o.AllowSelfSigned == nil {
		var ret bool
		return ret
	}
	return *o.AllowSelfSigned
}

// GetAllowSelfSignedOk returns a tuple with the AllowSelfSigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsSettings) GetAllowSelfSignedOk() (*bool, bool) {
	if o == nil || o.AllowSelfSigned == nil {
		return nil, false
	}
	return o.AllowSelfSigned, true
}

// HasAllowSelfSigned returns a boolean if a field has been set.
func (o *TlsSettings) HasAllowSelfSigned() bool {
	if o != nil && o.AllowSelfSigned != nil {
		return true
	}

	return false
}

// SetAllowSelfSigned gets a reference to the given bool and assigns it to the AllowSelfSigned field.
func (o *TlsSettings) SetAllowSelfSigned(v bool) {
	o.AllowSelfSigned = &v
}

// GetPublicKeysToVerify returns the PublicKeysToVerify field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TlsSettings) GetPublicKeysToVerify() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.PublicKeysToVerify
}

// GetPublicKeysToVerifyOk returns a tuple with the PublicKeysToVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TlsSettings) GetPublicKeysToVerifyOk() ([]string, bool) {
	if o == nil || o.PublicKeysToVerify == nil {
		return nil, false
	}
	return o.PublicKeysToVerify, true
}

// HasPublicKeysToVerify returns a boolean if a field has been set.
func (o *TlsSettings) HasPublicKeysToVerify() bool {
	if o != nil && o.PublicKeysToVerify != nil {
		return true
	}

	return false
}

// SetPublicKeysToVerify gets a reference to the given []string and assigns it to the PublicKeysToVerify field.
func (o *TlsSettings) SetPublicKeysToVerify(v []string) {
	o.PublicKeysToVerify = v
}

func (o TlsSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SniHostname.IsSet() {
		toSerialize["sni_hostname"] = o.SniHostname.Get()
	}
	if o.AllowSelfSigned != nil {
		toSerialize["allow_self_signed"] = o.AllowSelfSigned
	}
	if o.PublicKeysToVerify != nil {
		toSerialize["public_keys_to_verify"] = o.PublicKeysToVerify
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TlsSettings) UnmarshalJSON(bytes []byte) (err error) {
	varTlsSettings := _TlsSettings{}

	if err = json.Unmarshal(bytes, &varTlsSettings); err == nil {
		*o = TlsSettings(varTlsSettings)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "sni_hostname")
		delete(additionalProperties, "allow_self_signed")
		delete(additionalProperties, "public_keys_to_verify")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTlsSettings struct {
	value *TlsSettings
	isSet bool
}

func (v NullableTlsSettings) Get() *TlsSettings {
	return v.value
}

func (v *NullableTlsSettings) Set(val *TlsSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTlsSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTlsSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTlsSettings(val TlsSettings) NullableTlsSettings {
	return NullableTlsSettings{value: &val, isSet: true}
}

func (v NullableTlsSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTlsSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"encoding/json"
)

// CloudStorage struct for CloudStorage
type CloudStorage struct {
	ContainerName            *string `json:"container_name,omitempty"`
	CustomerOwned            bool    `json:"customer_owned"`
	AccessTypeId             int32   `json:"access_type_id"`
	CloudStorageRegionId     int32   `json:"cloud_storage_region_id"`
	CloudStorageLocationCode string  `json:"cloud_storage_location_code"`
	Token1                   string  `json:"token1"`
	Token2                   string  `json:"token2"`
	PrimaryKey               string  `json:"primary_key"`
	BackupKey                string  `json:"backup_key"`
	AdditionalProperties     map[string]interface{}
}

type _CloudStorage CloudStorage

// NewCloudStorage instantiates a new CloudStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudStorage(customerOwned bool, accessTypeId int32, cloudStorageRegionId int32, cloudStorageLocationCode string, token1 string, token2 string, primaryKey string, backupKey string) *CloudStorage {
	this := CloudStorage{}
	this.CustomerOwned = customerOwned
	this.AccessTypeId = accessTypeId
	this.CloudStorageRegionId = cloudStorageRegionId
	this.CloudStorageLocationCode = cloudStorageLocationCode
	this.Token1 = token1
	this.Token2 = token2
	this.PrimaryKey = primaryKey
	this.BackupKey = backupKey
	return &this
}

// NewCloudStorageWithDefaults instantiates a new CloudStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudStorageWithDefaults() *CloudStorage {
	this := CloudStorage{}
	return &this
}

// GetContainerName returns the ContainerName field value if set, zero value otherwise.
func (o *CloudStorage) GetContainerName() string {
	if o == nil || o.ContainerName == nil {
		var ret string
		return ret
	}
	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetContainerNameOk() (*string, bool) {
	if o == nil || o.ContainerName == nil {
		return nil, false
	}
	return o.ContainerName, true
}

// HasContainerName returns a boolean if a field has been set.
func (o *CloudStorage) HasContainerName() bool {
	if o != nil && o.ContainerName != nil {
		return true
	}

	return false
}

// SetContainerName gets a reference to the given string and assigns it to the ContainerName field.
func (o *CloudStorage) SetContainerName(v string) {
	o.ContainerName = &v
}

// GetCustomerOwned returns the CustomerOwned field value
func (o *CloudStorage) GetCustomerOwned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CustomerOwned
}

// GetCustomerOwnedOk returns a tuple with the CustomerOwned field value
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetCustomerOwnedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerOwned, true
}

// SetCustomerOwned sets field value
func (o *CloudStorage) SetCustomerOwned(v bool) {
	o.CustomerOwned = v
}

// GetAccessTypeId returns the AccessTypeId field value
func (o *CloudStorage) GetAccessTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccessTypeId
}

// GetAccessTypeIdOk returns a tuple with the AccessTypeId field value
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetAccessTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessTypeId, true
}

// SetAccessTypeId sets field value
func (o *CloudStorage) SetAccessTypeId(v int32) {
	o.AccessTypeId = v
}

// GetCloudStorageRegionId returns the CloudStorageRegionId field value
func (o *CloudStorage) GetCloudStorageRegionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CloudStorageRegionId
}

// GetCloudStorageRegionIdOk returns a tuple with the CloudStorageRegionId field value
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetCloudStorageRegionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudStorageRegionId, true
}

// SetCloudStorageRegionId sets field value
func (o *CloudStorage) SetCloudStorageRegionId(v int32) {
	o.CloudStorageRegionId = v
}

// GetCloudStorageLocationCode returns the CloudStorageLocationCode field value
func (o *CloudStorage) GetCloudStorageLocationCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudStorageLocationCode
}

// GetCloudStorageLocationCodeOk returns a tuple with the CloudStorageLocationCode field value
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetCloudStorageLocationCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudStorageLocationCode, true
}

// SetCloudStorageLocationCode sets field value
func (o *CloudStorage) SetCloudStorageLocationCode(v string) {
	o.CloudStorageLocationCode = v
}

// GetToken1 returns the Token1 field value
func (o *CloudStorage) GetToken1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token1
}

// GetToken1Ok returns a tuple with the Token1 field value
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetToken1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token1, true
}

// SetToken1 sets field value
func (o *CloudStorage) SetToken1(v string) {
	o.Token1 = v
}

// GetToken2 returns the Token2 field value
func (o *CloudStorage) GetToken2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token2
}

// GetToken2Ok returns a tuple with the Token2 field value
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetToken2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token2, true
}

// SetToken2 sets field value
func (o *CloudStorage) SetToken2(v string) {
	o.Token2 = v
}

// GetPrimaryKey returns the PrimaryKey field value
func (o *CloudStorage) GetPrimaryKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrimaryKey
}

// GetPrimaryKeyOk returns a tuple with the PrimaryKey field value
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetPrimaryKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryKey, true
}

// SetPrimaryKey sets field value
func (o *CloudStorage) SetPrimaryKey(v string) {
	o.PrimaryKey = v
}

// GetBackupKey returns the BackupKey field value
func (o *CloudStorage) GetBackupKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackupKey
}

// GetBackupKeyOk returns a tuple with the BackupKey field value
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetBackupKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupKey, true
}

// SetBackupKey sets field value
func (o *CloudStorage) SetBackupKey(v string) {
	o.BackupKey = v
}

func (o CloudStorage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContainerName != nil {
		toSerialize["container_name"] = o.ContainerName
	}
	if true {
		toSerialize["customer_owned"] = o.CustomerOwned
	}
	if true {
		toSerialize["access_type_id"] = o.AccessTypeId
	}
	if true {
		toSerialize["cloud_storage_region_id"] = o.CloudStorageRegionId
	}
	if true {
		toSerialize["cloud_storage_location_code"] = o.CloudStorageLocationCode
	}
	if true {
		toSerialize["token1"] = o.Token1
	}
	if true {
		toSerialize["token2"] = o.Token2
	}
	if true {
		toSerialize["primary_key"] = o.PrimaryKey
	}
	if true {
		toSerialize["backup_key"] = o.BackupKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CloudStorage) UnmarshalJSON(bytes []byte) (err error) {
	varCloudStorage := _CloudStorage{}

	if err = json.Unmarshal(bytes, &varCloudStorage); err == nil {
		*o = CloudStorage(varCloudStorage)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "container_name")
		delete(additionalProperties, "customer_owned")
		delete(additionalProperties, "access_type_id")
		delete(additionalProperties, "cloud_storage_region_id")
		delete(additionalProperties, "cloud_storage_location_code")
		delete(additionalProperties, "token1")
		delete(additionalProperties, "token2")
		delete(additionalProperties, "primary_key")
		delete(additionalProperties, "backup_key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCloudStorage struct {
	value *CloudStorage
	isSet bool
}

func (v NullableCloudStorage) Get() *CloudStorage {
	return v.value
}

func (v *NullableCloudStorage) Set(val *CloudStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudStorage(val CloudStorage) NullableCloudStorage {
	return NullableCloudStorage{value: &val, isSet: true}
}

func (v NullableCloudStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

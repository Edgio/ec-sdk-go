// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"encoding/json"
)

// CustomerOriginGroupHTTPRequest
type CustomerOriginGroupHTTPRequest struct {
	Name                 string         `json:"name"`
	HostHeader           NullableString `json:"host_header,omitempty"`
	ShieldPops           []*string      `json:"shield_pops,omitempty"`
	NetworkTypeId        NullableInt32  `json:"network_type_id,omitempty"`
	StrictPciCertified   NullableBool   `json:"strict_pci_certified,omitempty"`
	TlsSettings          *TlsSettings   `json:"tls_settings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomerOriginGroupHTTPRequest CustomerOriginGroupHTTPRequest

// NewCustomerOriginGroupHTTPRequest instantiates a new CustomerOriginGroupHTTPRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerOriginGroupHTTPRequest(name string) *CustomerOriginGroupHTTPRequest {
	this := CustomerOriginGroupHTTPRequest{}
	this.Name = name
	var hostHeader string = ""
	this.HostHeader = NewNullableString(hostHeader)
	var networkTypeId int32 = 1
	this.NetworkTypeId = NewNullableInt32(networkTypeId)
	var strictPciCertified bool = false
	this.StrictPciCertified = NewNullableBool(strictPciCertified)
	return &this
}

// NewCustomerOriginGroupHTTPRequestWithDefaults instantiates a new CustomerOriginGroupHTTPRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerOriginGroupHTTPRequestWithDefaults() *CustomerOriginGroupHTTPRequest {
	this := CustomerOriginGroupHTTPRequest{}
	var hostHeader string = ""
	this.HostHeader = NewNullableString(hostHeader)
	var networkTypeId int32 = 1
	this.NetworkTypeId = NewNullableInt32(networkTypeId)
	var strictPciCertified bool = false
	this.StrictPciCertified = NewNullableBool(strictPciCertified)
	return &this
}

// GetName returns the Name field value
func (o *CustomerOriginGroupHTTPRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomerOriginGroupHTTPRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomerOriginGroupHTTPRequest) SetName(v string) {
	o.Name = v
}

// GetHostHeader returns the HostHeader field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerOriginGroupHTTPRequest) GetHostHeader() string {
	if o == nil || o.HostHeader.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostHeader.Get()
}

// GetHostHeaderOk returns a tuple with the HostHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerOriginGroupHTTPRequest) GetHostHeaderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HostHeader.Get(), o.HostHeader.IsSet()
}

// HasHostHeader returns a boolean if a field has been set.
func (o *CustomerOriginGroupHTTPRequest) HasHostHeader() bool {
	if o != nil && o.HostHeader.IsSet() {
		return true
	}

	return false
}

// SetHostHeader gets a reference to the given NullableString and assigns it to the HostHeader field.
func (o *CustomerOriginGroupHTTPRequest) SetHostHeader(v string) {
	o.HostHeader.Set(&v)
}

// SetHostHeaderNil sets the value for HostHeader to be an explicit nil
func (o *CustomerOriginGroupHTTPRequest) SetHostHeaderNil() {
	o.HostHeader.Set(nil)
}

// UnsetHostHeader ensures that no value is present for HostHeader, not even an explicit nil
func (o *CustomerOriginGroupHTTPRequest) UnsetHostHeader() {
	o.HostHeader.Unset()
}

// GetShieldPops returns the ShieldPops field value if set, zero value otherwise.
func (o *CustomerOriginGroupHTTPRequest) GetShieldPops() []*string {
	if o == nil || o.ShieldPops == nil {
		var ret []*string
		return ret
	}
	return o.ShieldPops
}

// GetShieldPopsOk returns a tuple with the ShieldPops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerOriginGroupHTTPRequest) GetShieldPopsOk() ([]*string, bool) {
	if o == nil || o.ShieldPops == nil {
		return nil, false
	}
	return o.ShieldPops, true
}

// HasShieldPops returns a boolean if a field has been set.
func (o *CustomerOriginGroupHTTPRequest) HasShieldPops() bool {
	if o != nil && o.ShieldPops != nil {
		return true
	}

	return false
}

// SetShieldPops gets a reference to the given []*string and assigns it to the ShieldPops field.
func (o *CustomerOriginGroupHTTPRequest) SetShieldPops(v []*string) {
	o.ShieldPops = v
}

// GetNetworkTypeId returns the NetworkTypeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerOriginGroupHTTPRequest) GetNetworkTypeId() int32 {
	if o == nil || o.NetworkTypeId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NetworkTypeId.Get()
}

// GetNetworkTypeIdOk returns a tuple with the NetworkTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerOriginGroupHTTPRequest) GetNetworkTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkTypeId.Get(), o.NetworkTypeId.IsSet()
}

// HasNetworkTypeId returns a boolean if a field has been set.
func (o *CustomerOriginGroupHTTPRequest) HasNetworkTypeId() bool {
	if o != nil && o.NetworkTypeId.IsSet() {
		return true
	}

	return false
}

// SetNetworkTypeId gets a reference to the given NullableInt32 and assigns it to the NetworkTypeId field.
func (o *CustomerOriginGroupHTTPRequest) SetNetworkTypeId(v int32) {
	o.NetworkTypeId.Set(&v)
}

// SetNetworkTypeIdNil sets the value for NetworkTypeId to be an explicit nil
func (o *CustomerOriginGroupHTTPRequest) SetNetworkTypeIdNil() {
	o.NetworkTypeId.Set(nil)
}

// UnsetNetworkTypeId ensures that no value is present for NetworkTypeId, not even an explicit nil
func (o *CustomerOriginGroupHTTPRequest) UnsetNetworkTypeId() {
	o.NetworkTypeId.Unset()
}

// GetStrictPciCertified returns the StrictPciCertified field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerOriginGroupHTTPRequest) GetStrictPciCertified() bool {
	if o == nil || o.StrictPciCertified.Get() == nil {
		var ret bool
		return ret
	}
	return *o.StrictPciCertified.Get()
}

// GetStrictPciCertifiedOk returns a tuple with the StrictPciCertified field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerOriginGroupHTTPRequest) GetStrictPciCertifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.StrictPciCertified.Get(), o.StrictPciCertified.IsSet()
}

// HasStrictPciCertified returns a boolean if a field has been set.
func (o *CustomerOriginGroupHTTPRequest) HasStrictPciCertified() bool {
	if o != nil && o.StrictPciCertified.IsSet() {
		return true
	}

	return false
}

// SetStrictPciCertified gets a reference to the given NullableBool and assigns it to the StrictPciCertified field.
func (o *CustomerOriginGroupHTTPRequest) SetStrictPciCertified(v bool) {
	o.StrictPciCertified.Set(&v)
}

// SetStrictPciCertifiedNil sets the value for StrictPciCertified to be an explicit nil
func (o *CustomerOriginGroupHTTPRequest) SetStrictPciCertifiedNil() {
	o.StrictPciCertified.Set(nil)
}

// UnsetStrictPciCertified ensures that no value is present for StrictPciCertified, not even an explicit nil
func (o *CustomerOriginGroupHTTPRequest) UnsetStrictPciCertified() {
	o.StrictPciCertified.Unset()
}

// GetTlsSettings returns the TlsSettings field value if set, zero value otherwise.
func (o *CustomerOriginGroupHTTPRequest) GetTlsSettings() TlsSettings {
	if o == nil || o.TlsSettings == nil {
		var ret TlsSettings
		return ret
	}
	return *o.TlsSettings
}

// GetTlsSettingsOk returns a tuple with the TlsSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerOriginGroupHTTPRequest) GetTlsSettingsOk() (*TlsSettings, bool) {
	if o == nil || o.TlsSettings == nil {
		return nil, false
	}
	return o.TlsSettings, true
}

// HasTlsSettings returns a boolean if a field has been set.
func (o *CustomerOriginGroupHTTPRequest) HasTlsSettings() bool {
	if o != nil && o.TlsSettings != nil {
		return true
	}

	return false
}

// SetTlsSettings gets a reference to the given TlsSettings and assigns it to the TlsSettings field.
func (o *CustomerOriginGroupHTTPRequest) SetTlsSettings(v TlsSettings) {
	o.TlsSettings = &v
}

func (o CustomerOriginGroupHTTPRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.HostHeader.IsSet() {
		toSerialize["host_header"] = o.HostHeader.Get()
	}
	if o.ShieldPops != nil {
		toSerialize["shield_pops"] = o.ShieldPops
	}
	if o.NetworkTypeId.IsSet() {
		toSerialize["network_type_id"] = o.NetworkTypeId.Get()
	}
	if o.StrictPciCertified.IsSet() {
		toSerialize["strict_pci_certified"] = o.StrictPciCertified.Get()
	}
	if o.TlsSettings != nil {
		toSerialize["tls_settings"] = o.TlsSettings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CustomerOriginGroupHTTPRequest) UnmarshalJSON(bytes []byte) (err error) {
	varCustomerOriginGroupHTTPRequest := _CustomerOriginGroupHTTPRequest{}

	if err = json.Unmarshal(bytes, &varCustomerOriginGroupHTTPRequest); err == nil {
		*o = CustomerOriginGroupHTTPRequest(varCustomerOriginGroupHTTPRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "host_header")
		delete(additionalProperties, "shield_pops")
		delete(additionalProperties, "network_type_id")
		delete(additionalProperties, "strict_pci_certified")
		delete(additionalProperties, "tls_settings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomerOriginGroupHTTPRequest struct {
	value *CustomerOriginGroupHTTPRequest
	isSet bool
}

func (v NullableCustomerOriginGroupHTTPRequest) Get() *CustomerOriginGroupHTTPRequest {
	return v.value
}

func (v *NullableCustomerOriginGroupHTTPRequest) Set(val *CustomerOriginGroupHTTPRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerOriginGroupHTTPRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerOriginGroupHTTPRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerOriginGroupHTTPRequest(val CustomerOriginGroupHTTPRequest) NullableCustomerOriginGroupHTTPRequest {
	return NullableCustomerOriginGroupHTTPRequest{value: &val, isSet: true}
}

func (v NullableCustomerOriginGroupHTTPRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerOriginGroupHTTPRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

type HttpLargeOnlyClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

func NewHttpLargeOnlyClientService(
	c ecclient.APIClient,
	baseAPIURL string,
) HttpLargeOnlyClientService {
	return HttpLargeOnlyClient{c, baseAPIURL}
}

type HttpLargeOnlyClientService interface {
	GetHttpLargeGroups(params GetHttpLargeGroupsParams) ([]CustomerOriginGroupHTTP, error)

	GetHttpLargeGroupsGroupId(params GetHttpLargeGroupsGroupIdParams) (*CustomerOriginGroupHTTP, error)

	GetHttpLargeShieldPops(params GetHttpLargeShieldPopsParams) ([]OriginShieldEdgeNode, error)

	PostHttpLargeGroups(params PostHttpLargeGroupsParams) (*CustomerOriginGroupHTTP, error)

	PutHttplargeGroupsGroupId(params PutHttplargeGroupsGroupIdParams) (*CustomerOriginGroupHTTP, error)
}

type GetHttpLargeGroupsParams struct{}

// BuildGetHttpLargeGroupsRequest extracts parameters and sets for the request to be consumed
func BuildGetHttpLargeGroupsRequest(p GetHttpLargeGroupsParams) (*request, error) {
	var res []error
	params := newRequest()

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
GetHttpLargeGroups Get Http Large customer origins groups

Get list of Http Large Customer Origin Groups

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHttpLargeGroupsRequest
*/
func (c HttpLargeOnlyClient) GetHttpLargeGroups(params GetHttpLargeGroupsParams) ([]CustomerOriginGroupHTTP, error) {
	req, err := BuildGetHttpLargeGroupsRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeGroups: %w", err)
	}

	parsedResponse := make([]CustomerOriginGroupHTTP, 0)

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/http-large/groups",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeGroups: %w", err)
	}

	return parsedResponse, nil
}

type GetHttpLargeGroupsGroupIdParams struct {
	GroupId string
}

// BuildGetHttpLargeGroupsGroupIdRequest extracts parameters and sets for the request to be consumed
func BuildGetHttpLargeGroupsGroupIdRequest(p GetHttpLargeGroupsGroupIdParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["groupId"] = p.GroupId

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
GetHttpLargeGroupsGroupId Get specific Http Large customer origin group by id

Get an individual Http Large Customer Origin Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId Customer Origin Group Id
	@return ApiGetHttpLargeGroupsGroupIdRequest
*/
func (c HttpLargeOnlyClient) GetHttpLargeGroupsGroupId(params GetHttpLargeGroupsGroupIdParams) (*CustomerOriginGroupHTTP, error) {
	req, err := BuildGetHttpLargeGroupsGroupIdRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeGroupsGroupId: %w", err)
	}

	parsedResponse := CustomerOriginGroupHTTP{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/http-large/groups/{groupId}",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeGroupsGroupId: %w", err)
	}

	return &parsedResponse, nil
}

type GetHttpLargeShieldPopsParams struct{}

// BuildGetHttpLargeShieldPopsRequest extracts parameters and sets for the request to be consumed
func BuildGetHttpLargeShieldPopsRequest(p GetHttpLargeShieldPopsParams) (*request, error) {
	var res []error
	params := newRequest()

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
GetHttpLargeShieldPops Get list of origin shield pops

Get list of Origin Shield Pops. This API should work only for http-large Origin

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetHttpLargeShieldPopsRequest
*/
func (c HttpLargeOnlyClient) GetHttpLargeShieldPops(params GetHttpLargeShieldPopsParams) ([]OriginShieldEdgeNode, error) {
	req, err := BuildGetHttpLargeShieldPopsRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeShieldPops: %w", err)
	}

	parsedResponse := make([]OriginShieldEdgeNode, 0)

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/http-large/shield-pops",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeShieldPops: %w", err)
	}

	return parsedResponse, nil
}

type PostHttpLargeGroupsParams struct {
	CustomerOriginGroupHTTP CustomerOriginGroupHTTP
}

// BuildPostHttpLargeGroupsRequest extracts parameters and sets for the request to be consumed
func BuildPostHttpLargeGroupsRequest(p PostHttpLargeGroupsParams) (*request, error) {
	var res []error
	params := newRequest()

	params.body = p.CustomerOriginGroupHTTP

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
PostHttpLargeGroups Create new Http Large customer origin group

Create new Http Large Customer Origin Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostHttpLargeGroupsRequest
*/
func (c HttpLargeOnlyClient) PostHttpLargeGroups(params PostHttpLargeGroupsParams) (*CustomerOriginGroupHTTP, error) {
	req, err := BuildPostHttpLargeGroupsRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		return nil, fmt.Errorf("PostHttpLargeGroups: %w", err)
	}

	parsedResponse := CustomerOriginGroupHTTP{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/http-large/groups",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("PostHttpLargeGroups: %w", err)
	}

	return &parsedResponse, nil
}

type PutHttplargeGroupsGroupIdParams struct {
	GroupId                 string
	CustomerOriginGroupHTTP CustomerOriginGroupHTTP
}

// BuildPutHttplargeGroupsGroupIdRequest extracts parameters and sets for the request to be consumed
func BuildPutHttplargeGroupsGroupIdRequest(p PutHttplargeGroupsGroupIdParams) (*request, error) {
	var res []error
	params := newRequest()

	params.pathParams["groupId"] = p.GroupId

	params.body = p.CustomerOriginGroupHTTP

	if len(res) > 0 {
		return params, errors.CompositeValidationError(res...)
	}

	return params, nil
}

/*
PutHttplargeGroupsGroupId Update Http Large customer origin group by id

Update an individual Http Large Customer Origin Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId Customer Origin Group Id
	@return ApiPutHttplargeGroupsGroupIdRequest
*/
func (c HttpLargeOnlyClient) PutHttplargeGroupsGroupId(params PutHttplargeGroupsGroupIdParams) (*CustomerOriginGroupHTTP, error) {
	req, err := BuildPutHttplargeGroupsGroupIdRequest(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		return nil, fmt.Errorf("PutHttplargeGroupsGroupId: %w", err)
	}

	parsedResponse := CustomerOriginGroupHTTP{}

	_, err = c.apiClient.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           c.baseAPIURL + "/http-large/groups/{groupId}",
		RawBody:        req.body,
		PathParams:     req.pathParams,
		QueryParams:    req.queryParams,
		Headers:        req.headers,
		ParsedResponse: &parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("PutHttplargeGroupsGroupId: %w", err)
	}

	return &parsedResponse, nil
}

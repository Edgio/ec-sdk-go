// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

// HttpLargeOnlyClient is the concrete client implementation for HttpLargeOnly
type HttpLargeOnlyClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

// NewHttpLargeOnlyClient creates a new instance of HttpLargeOnlyClient
func NewHttpLargeOnlyClient(
	c ecclient.APIClient,
	baseAPIURL string,
) HttpLargeOnlyClient {
	return HttpLargeOnlyClient{c, baseAPIURL}
}

// HttpLargeOnlyClientService defines the operations for HttpLargeOnly
type HttpLargeOnlyClientService interface {
	GetHttpLargeGroups() ([]CustomerOriginGroupHTTP, error)

	GetHttpLargeGroupsGroupId(
		params GetHttpLargeGroupsGroupIdParams,
	) (*CustomerOriginGroupHTTP, error)

	GetHttpLargeShieldPops(
		params GetHttpLargeShieldPopsParams,
	) ([]OriginShieldEdgeNode, error)

	PostHttpLargeGroups(
		params PostHttpLargeGroupsParams,
	) (*CustomerOriginGroupHTTP, error)

	PutHttplargeGroupsGroupId(
		params PutHttplargeGroupsGroupIdParams,
	) (*CustomerOriginGroupHTTP, error)
}

// GetHttpLargeGroups - Get Http Large customer origins groups
//  Get list of Http Large Customer Origin Groups
func (c HttpLargeOnlyClient) GetHttpLargeGroups() ([]CustomerOriginGroupHTTP, error) {
	req, err := buildGetHttpLargeGroupsRequest(c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]CustomerOriginGroupHTTP, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeGroups: %w", err)
	}

	return parsedResponse, nil
}

func buildGetHttpLargeGroupsRequest(
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/http-large/groups"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetHttpLargeGroups: %w", err))
	}

	req.Method = method

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetHttpLargeGroupsGroupIdParams contains the parameters for GetHttpLargeGroupsGroupId
type GetHttpLargeGroupsGroupIdParams struct {
	// Customer Origin Group Id
	GroupId string
}

// NewGetHttpLargeGroupsGroupIdParams creates a new instance of GetHttpLargeGroupsGroupIdParams
func NewGetHttpLargeGroupsGroupIdParams() GetHttpLargeGroupsGroupIdParams {
	return GetHttpLargeGroupsGroupIdParams{}
}

// GetHttpLargeGroupsGroupId - Get specific Http Large customer origin group by id
//  Get an individual Http Large Customer Origin Group
func (c HttpLargeOnlyClient) GetHttpLargeGroupsGroupId(
	params GetHttpLargeGroupsGroupIdParams,
) (*CustomerOriginGroupHTTP, error) {
	req, err := buildGetHttpLargeGroupsGroupIdRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupHTTP{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeGroupsGroupId: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetHttpLargeGroupsGroupIdRequest(
	p GetHttpLargeGroupsGroupIdParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/http-large/groups/{groupId}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetHttpLargeGroupsGroupId: %w", err))
	}

	req.Method = method

	req.PathParams["groupId"] = p.GroupId

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetHttpLargeShieldPopsParams contains the parameters for GetHttpLargeShieldPops
type GetHttpLargeShieldPopsParams struct {
	Findcode string
}

// NewGetHttpLargeShieldPopsParams creates a new instance of GetHttpLargeShieldPopsParams
func NewGetHttpLargeShieldPopsParams() GetHttpLargeShieldPopsParams {
	return GetHttpLargeShieldPopsParams{}
}

// GetHttpLargeShieldPops - Get list of origin shield pops
//  Get list of Origin Shield Pops. This API should work only for http-large Origin
func (c HttpLargeOnlyClient) GetHttpLargeShieldPops(
	params GetHttpLargeShieldPopsParams,
) ([]OriginShieldEdgeNode, error) {
	req, err := buildGetHttpLargeShieldPopsRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]OriginShieldEdgeNode, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeShieldPops: %w", err)
	}

	return parsedResponse, nil
}

func buildGetHttpLargeShieldPopsRequest(
	p GetHttpLargeShieldPopsParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/http-large/shield-pops"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetHttpLargeShieldPops: %w", err))
	}

	req.Method = method

	req.QueryParams["findcode"] = p.Findcode

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// PostHttpLargeGroupsParams contains the parameters for PostHttpLargeGroups
type PostHttpLargeGroupsParams struct {
	CustomerOriginGroupHTTPRequest CustomerOriginGroupHTTPRequest
}

// NewPostHttpLargeGroupsParams creates a new instance of PostHttpLargeGroupsParams
func NewPostHttpLargeGroupsParams() PostHttpLargeGroupsParams {
	return PostHttpLargeGroupsParams{}
}

// PostHttpLargeGroups - Create new Http Large customer origin group
//  Create new Http Large Customer Origin Group
func (c HttpLargeOnlyClient) PostHttpLargeGroups(
	params PostHttpLargeGroupsParams,
) (*CustomerOriginGroupHTTP, error) {
	req, err := buildPostHttpLargeGroupsRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupHTTP{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("PostHttpLargeGroups: %w", err)
	}

	return &parsedResponse, nil
}

func buildPostHttpLargeGroupsRequest(
	p PostHttpLargeGroupsParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/http-large/groups"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		errs = append(errs, fmt.Errorf("PostHttpLargeGroups: %w", err))
	}

	req.Method = method
	req.RawBody = p.CustomerOriginGroupHTTPRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// PutHttplargeGroupsGroupIdParams contains the parameters for PutHttplargeGroupsGroupId
type PutHttplargeGroupsGroupIdParams struct {
	// Customer Origin Group Id
	GroupId string

	CustomerOriginGroupHTTPRequest CustomerOriginGroupHTTPRequest
}

// NewPutHttplargeGroupsGroupIdParams creates a new instance of PutHttplargeGroupsGroupIdParams
func NewPutHttplargeGroupsGroupIdParams() PutHttplargeGroupsGroupIdParams {
	return PutHttplargeGroupsGroupIdParams{}
}

// PutHttplargeGroupsGroupId - Update Http Large customer origin group by id
//  Update an individual Http Large Customer Origin Group
func (c HttpLargeOnlyClient) PutHttplargeGroupsGroupId(
	params PutHttplargeGroupsGroupIdParams,
) (*CustomerOriginGroupHTTP, error) {
	req, err := buildPutHttplargeGroupsGroupIdRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupHTTP{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("PutHttplargeGroupsGroupId: %w", err)
	}

	return &parsedResponse, nil
}

func buildPutHttplargeGroupsGroupIdRequest(
	p PutHttplargeGroupsGroupIdParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/http-large/groups/{groupId}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		errs = append(errs, fmt.Errorf("PutHttplargeGroupsGroupId: %w", err))
	}

	req.Method = method

	req.PathParams["groupId"] = p.GroupId

	req.RawBody = p.CustomerOriginGroupHTTPRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

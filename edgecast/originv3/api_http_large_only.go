// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
	"github.com/go-openapi/errors"
)

// HttpLargeOnlyClient is the concrete client implementation for HttpLargeOnly
type HttpLargeOnlyClient struct {
	apiClient  ecclient.APIClient
	baseAPIURL string
}

// NewHttpLargeOnlyClient creates a new instance of HttpLargeOnlyClient
func NewHttpLargeOnlyClient(
	c ecclient.APIClient,
	baseAPIURL string,
) HttpLargeOnlyClient {
	return HttpLargeOnlyClient{c, baseAPIURL}
}

// HttpLargeOnlyClientService defines the operations for HttpLargeOnly
type HttpLargeOnlyClientService interface {
	CreateHttpLargeGroup(
		params CreateHttpLargeGroupParams,
	) (*CustomerOriginGroupHTTP, error)

	GetHttpLargeGroup(
		params GetHttpLargeGroupParams,
	) (*CustomerOriginGroupHTTP, error)

	GetHttpLargeGroups() ([]CustomerOriginGroupHTTP, error)

	GetOriginShieldPops(
		params GetOriginShieldPopsParams,
	) ([]OriginShieldEdgeNode, error)

	UpdateHttplargeGroup(
		params UpdateHttplargeGroupParams,
	) (*CustomerOriginGroupHTTP, error)
}

// CreateHttpLargeGroupParams contains the parameters for CreateHttpLargeGroup
type CreateHttpLargeGroupParams struct {
	CustomerOriginGroupHTTPRequest CustomerOriginGroupHTTPRequest
}

// NewCreateHttpLargeGroupParams creates a new instance of CreateHttpLargeGroupParams
func NewCreateHttpLargeGroupParams() CreateHttpLargeGroupParams {
	return CreateHttpLargeGroupParams{}
}

// CreateHttpLargeGroup - Create new Http Large customer origin group
//
//	Create new Http Large Customer Origin Group
func (c HttpLargeOnlyClient) CreateHttpLargeGroup(
	params CreateHttpLargeGroupParams,
) (*CustomerOriginGroupHTTP, error) {
	req, err := buildCreateHttpLargeGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupHTTP{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("CreateHttpLargeGroup: %w", err)
	}

	return &parsedResponse, nil
}

func buildCreateHttpLargeGroupRequest(
	p CreateHttpLargeGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/http-large/groups"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Post")
	if err != nil {
		errs = append(errs, fmt.Errorf("CreateHttpLargeGroup: %w", err))
	}

	req.Method = method
	req.RawBody = p.CustomerOriginGroupHTTPRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetHttpLargeGroupParams contains the parameters for GetHttpLargeGroup
type GetHttpLargeGroupParams struct {
	// Customer Origin Group Id
	GroupId int32
}

// NewGetHttpLargeGroupParams creates a new instance of GetHttpLargeGroupParams
func NewGetHttpLargeGroupParams() GetHttpLargeGroupParams {
	return GetHttpLargeGroupParams{}
}

// GetHttpLargeGroup - Get specific Http Large customer origin group by id
//
//	Get an individual Http Large Customer Origin Group
func (c HttpLargeOnlyClient) GetHttpLargeGroup(
	params GetHttpLargeGroupParams,
) (*CustomerOriginGroupHTTP, error) {
	req, err := buildGetHttpLargeGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupHTTP{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeGroup: %w", err)
	}

	return &parsedResponse, nil
}

func buildGetHttpLargeGroupRequest(
	p GetHttpLargeGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/http-large/groups/{groupId}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetHttpLargeGroup: %w", err))
	}

	req.Method = method

	req.PathParams["groupId"] = NumberToString(p.GroupId)

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetHttpLargeGroups - Get Http Large customer origins groups
//
//	Get list of Http Large Customer Origin Groups
func (c HttpLargeOnlyClient) GetHttpLargeGroups() ([]CustomerOriginGroupHTTP, error) {
	req, err := buildGetHttpLargeGroupsRequest(c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]CustomerOriginGroupHTTP, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetHttpLargeGroups: %w", err)
	}

	return parsedResponse, nil
}

func buildGetHttpLargeGroupsRequest(
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/http-large/groups"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetHttpLargeGroups: %w", err))
	}

	req.Method = method

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// GetOriginShieldPopsParams contains the parameters for GetOriginShieldPops
type GetOriginShieldPopsParams struct {
	Findcode string
}

// NewGetOriginShieldPopsParams creates a new instance of GetOriginShieldPopsParams
func NewGetOriginShieldPopsParams() GetOriginShieldPopsParams {
	return GetOriginShieldPopsParams{}
}

// GetOriginShieldPops - Get list of origin shield pops
//
//	Get list of Origin Shield Pops. This API should work only for http-large Origin
func (c HttpLargeOnlyClient) GetOriginShieldPops(
	params GetOriginShieldPopsParams,
) ([]OriginShieldEdgeNode, error) {
	req, err := buildGetOriginShieldPopsRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := make([]OriginShieldEdgeNode, 0)
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("GetOriginShieldPops: %w", err)
	}

	return parsedResponse, nil
}

func buildGetOriginShieldPopsRequest(
	p GetOriginShieldPopsParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/http-large/shield-pops"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Get")
	if err != nil {
		errs = append(errs, fmt.Errorf("GetOriginShieldPops: %w", err))
	}

	req.Method = method

	req.QueryParams["findcode"] = p.Findcode

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

// UpdateHttplargeGroupParams contains the parameters for UpdateHttplargeGroup
type UpdateHttplargeGroupParams struct {
	// Customer Origin Group Id
	GroupId int32

	CustomerOriginGroupHTTPRequest CustomerOriginGroupHTTPRequest
}

// NewUpdateHttplargeGroupParams creates a new instance of UpdateHttplargeGroupParams
func NewUpdateHttplargeGroupParams() UpdateHttplargeGroupParams {
	return UpdateHttplargeGroupParams{}
}

// UpdateHttplargeGroup - Update Http Large customer origin group by id
//
//	Update an individual Http Large Customer Origin Group
func (c HttpLargeOnlyClient) UpdateHttplargeGroup(
	params UpdateHttplargeGroupParams,
) (*CustomerOriginGroupHTTP, error) {
	req, err := buildUpdateHttplargeGroupRequest(params, c.baseAPIURL)
	if err != nil {
		return nil, err
	}

	parsedResponse := CustomerOriginGroupHTTP{}
	req.ParsedResponse = &parsedResponse

	_, err = c.apiClient.SubmitRequest(*req)

	if err != nil {
		return nil, fmt.Errorf("UpdateHttplargeGroup: %w", err)
	}

	return &parsedResponse, nil
}

func buildUpdateHttplargeGroupRequest(
	p UpdateHttplargeGroupParams,
	baseAPIURL string,
) (*ecclient.SubmitRequestParams, error) {
	req := ecclient.NewSubmitRequestParams()
	req.Path = baseAPIURL + "/http-large/groups/{groupId}"
	errs := make([]error, 0)

	method, err := ecclient.ToHTTPMethod("Put")
	if err != nil {
		errs = append(errs, fmt.Errorf("UpdateHttplargeGroup: %w", err))
	}

	req.Method = method

	req.PathParams["groupId"] = NumberToString(p.GroupId)

	req.RawBody = p.CustomerOriginGroupHTTPRequest

	if len(errs) > 0 {
		return nil, errors.CompositeValidationError(errs...)
	}

	return &req, nil
}

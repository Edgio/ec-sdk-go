// Code generated by the Code Generation Kit (CGK) using OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

/*
Customer Origins API v3

List of API of config Customer Origin.

API version: 0.5.0
Contact: portals-streaming@edgecast.com
*/

package originv3

import (
	"encoding/json"
)

// OriginShieldPop OriginShieldPop object
type OriginShieldPop struct {
	Id                   *float32 `json:"id,omitempty"`
	Code                 string   `json:"code"`
	City                 *string  `json:"city,omitempty"`
	Region               *string  `json:"region,omitempty"`
	RegionId             *float32 `json:"region_id,omitempty"`
	IsPciCertified       *bool    `json:"is_pci_certified,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OriginShieldPop OriginShieldPop

// NewOriginShieldPop instantiates a new OriginShieldPop object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOriginShieldPop(code string) *OriginShieldPop {
	this := OriginShieldPop{}
	this.Code = code
	return &this
}

// NewOriginShieldPopWithDefaults instantiates a new OriginShieldPop object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOriginShieldPopWithDefaults() *OriginShieldPop {
	this := OriginShieldPop{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OriginShieldPop) GetId() float32 {
	if o == nil || o.Id == nil {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginShieldPop) GetIdOk() (*float32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OriginShieldPop) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *OriginShieldPop) SetId(v float32) {
	o.Id = &v
}

// GetCode returns the Code field value
func (o *OriginShieldPop) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *OriginShieldPop) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *OriginShieldPop) SetCode(v string) {
	o.Code = v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *OriginShieldPop) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginShieldPop) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *OriginShieldPop) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *OriginShieldPop) SetCity(v string) {
	o.City = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *OriginShieldPop) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginShieldPop) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *OriginShieldPop) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *OriginShieldPop) SetRegion(v string) {
	o.Region = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *OriginShieldPop) GetRegionId() float32 {
	if o == nil || o.RegionId == nil {
		var ret float32
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginShieldPop) GetRegionIdOk() (*float32, bool) {
	if o == nil || o.RegionId == nil {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *OriginShieldPop) HasRegionId() bool {
	if o != nil && o.RegionId != nil {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given float32 and assigns it to the RegionId field.
func (o *OriginShieldPop) SetRegionId(v float32) {
	o.RegionId = &v
}

// GetIsPciCertified returns the IsPciCertified field value if set, zero value otherwise.
func (o *OriginShieldPop) GetIsPciCertified() bool {
	if o == nil || o.IsPciCertified == nil {
		var ret bool
		return ret
	}
	return *o.IsPciCertified
}

// GetIsPciCertifiedOk returns a tuple with the IsPciCertified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginShieldPop) GetIsPciCertifiedOk() (*bool, bool) {
	if o == nil || o.IsPciCertified == nil {
		return nil, false
	}
	return o.IsPciCertified, true
}

// HasIsPciCertified returns a boolean if a field has been set.
func (o *OriginShieldPop) HasIsPciCertified() bool {
	if o != nil && o.IsPciCertified != nil {
		return true
	}

	return false
}

// SetIsPciCertified gets a reference to the given bool and assigns it to the IsPciCertified field.
func (o *OriginShieldPop) SetIsPciCertified(v bool) {
	o.IsPciCertified = &v
}

func (o OriginShieldPop) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["code"] = o.Code
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.RegionId != nil {
		toSerialize["region_id"] = o.RegionId
	}
	if o.IsPciCertified != nil {
		toSerialize["is_pci_certified"] = o.IsPciCertified
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OriginShieldPop) UnmarshalJSON(bytes []byte) (err error) {
	varOriginShieldPop := _OriginShieldPop{}

	if err = json.Unmarshal(bytes, &varOriginShieldPop); err == nil {
		*o = OriginShieldPop(varOriginShieldPop)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "code")
		delete(additionalProperties, "city")
		delete(additionalProperties, "region")
		delete(additionalProperties, "region_id")
		delete(additionalProperties, "is_pci_certified")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOriginShieldPop struct {
	value *OriginShieldPop
	isSet bool
}

func (v NullableOriginShieldPop) Get() *OriginShieldPop {
	return v.value
}

func (v *NullableOriginShieldPop) Set(val *OriginShieldPop) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginShieldPop) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginShieldPop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginShieldPop(val *OriginShieldPop) *NullableOriginShieldPop {
	return &NullableOriginShieldPop{value: val, isSet: true}
}

func (v NullableOriginShieldPop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginShieldPop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
